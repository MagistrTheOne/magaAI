# -*- coding: utf-8 -*-
"""
Telegram Bot –¥–ª—è –ú–ê–ì–ê - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ Telegram
"""

import asyncio
import logging
import os
from typing import Dict, List, Optional, Any
from datetime import datetime
import json

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç—ã –ú–ê–ì–ê –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from brain.gigachat_sdk import BrainManager, GigaChatConfig
    from intent_engine import IntentEngine
    from quantum_negotiation import QuantumNegotiationEngine
    from memory_palace import MemoryPalace
    from success_prediction import SuccessPredictionEngine, PredictionFeatures
    from secrets_watchdog import SecretsWatchdogManager
    from job_apis import JobAPIManager, JobSearchParams
    from mail_calendar import MailCalendar  # type: ignore
    BRAIN_AVAILABLE = True
except ImportError as e:
    print(f"Warning: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ú–ê–ì–ê –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    BRAIN_AVAILABLE = False


class MAGATelegramBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ú–ê–ì–ê
    """

    def __init__(self, token: str = None):
        """
        Args:
            token: Telegram Bot Token (optional, will be loaded from env/secrets)
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ secrets
        if not token:
            token = os.getenv("TELEGRAM_BOT_TOKEN")
            if not token:
                try:
                    from secrets_watchdog import SecretsWatchdogManager
                    secrets_manager = SecretsWatchdogManager()
                    token = secrets_manager.get_secret("TELEGRAM_BOT_TOKEN")
                except ImportError:
                    pass
        
        if not token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ secrets.")
        
        self.token = token
        self.bot = Bot(
            token=token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ú–ê–ì–ê
        self.brain_manager = None
        self.intent_engine = None
        self.quantum_negotiation = None
        self.memory_palace = None
        self.success_prediction = None
        self.secrets_manager = None
        self.auto_pilot = None
        self.job_api_manager = None
        self.mail_calendar = None

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states: Dict[int, Dict[str, Any]] = {}
        self.user_contexts: Dict[int, Dict[str, Any]] = {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger("MAGATelegramBot")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_maga_components()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self._register_handlers()

    def _init_maga_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ú–ê–ì–ê"""
        try:
            if not BRAIN_AVAILABLE:
                self.logger.warning("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ú–ê–ì–ê –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            # Secrets Manager
            self.secrets_manager = SecretsWatchdogManager()

            # GigaChat –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config = GigaChatConfig()
            config.client_id = self.secrets_manager.get_secret("GIGACHAT_CLIENT_ID") or ""
            config.client_secret = self.secrets_manager.get_secret("GIGACHAT_CLIENT_SECRET") or ""
            config.scope = self.secrets_manager.get_secret("GIGACHAT_SCOPE") or "GIGACHAT_API_PERS"

            # Brain Manager
            self.brain_manager = BrainManager(config)

            # Intent Engine
            self.intent_engine = IntentEngine()
            if self.brain_manager:
                self.intent_engine.set_brain_manager(self.brain_manager)

            # Quantum Negotiation
            self.quantum_negotiation = QuantumNegotiationEngine(
                brain_manager=self.brain_manager,
                base_salary=200000,
                target_salary=250000
            )

            # Memory Palace
            self.memory_palace = MemoryPalace()

            # Success Prediction
            self.success_prediction = SuccessPredictionEngine()

            self.logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ú–ê–ì–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Telegram –±–æ—Ç–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ú–ê–ì–ê: {e}")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""

        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_status, Command("status"))

        # Callback queries –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(self.handle_callback, lambda c: True)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_voice, lambda m: m.voice is not None)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.handle_text)

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'mode': 'main',
            'last_activity': datetime.now(),
            'conversation_history': []
        }

        self.user_contexts[user_id] = {
            'company': None,
            'position': None,
            'salary_target': 250000,
            'active_autopilot': False
        }

        keyboard = self._get_main_keyboard()
        text = (
            "ü§ñ <b>–ú–ê–ì–ê - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ</b>\n\n"
            "–Ø –º–æ–≥—É:\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–¥–∞—Ç—å —Ä–µ–∑—é–º–µ\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º\n"
            "‚Ä¢ –í–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(text, reply_markup=keyboard)

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        text = (
            "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ú–ê–ì–ê</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É –≤ –Ø–Ω–¥–µ–∫—Å–µ\"\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –ø—Ä–æ–≤–µ—Ä—å –ø–æ—á—Ç—É\"\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –ø–æ–¥–≥–æ—Ç–æ–≤—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é\"\n\n"
            "<b>–ö–Ω–æ–ø–∫–∏:</b>\n"
            "‚Ä¢ üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É\n"
            "‚Ä¢ üìß –ü–æ—á—Ç–∞\n"
            "‚Ä¢ üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "‚Ä¢ üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã\n"
            "‚Ä¢ üéØ –ü—Ä–æ–≥–Ω–æ–∑\n"
            "‚Ä¢ ü§ñ Auto-Pilot"
        )

        await message.answer(text)

    async def cmd_status(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = message.from_user.id

        status_text = "üìä <b>–°—Ç–∞—Ç—É—Å –ú–ê–ì–ê</b>\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components_status = {
            "üß† GigaChat": self.brain_manager and self.brain_manager.is_authenticated,
            "‚öõÔ∏è Quantum Negotiation": self.quantum_negotiation is not None,
            "üß† Memory Palace": self.memory_palace is not None,
            "üîÆ Success Prediction": self.success_prediction is not None,
            "üéØ Intent Engine": self.intent_engine is not None
        }

        for component, status in components_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            status_text += f"{status_icon} {component}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_id in self.user_states:
            state = self.user_states[user_id]
            status_text += f"\nüë§ –†–µ–∂–∏–º: {state['mode']}\n"
            status_text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {len(state['conversation_history'])}\n"

        if user_id in self.user_contexts:
            context = self.user_contexts[user_id]
            if context['company']:
                status_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context['company']}\n"
            if context['position']:
                status_text += f"üíº –ü–æ–∑–∏—Ü–∏—è: {context['position']}\n"
            if context['active_autopilot']:
                status_text += "üöÄ Auto-Pilot: –ê–∫—Ç–∏–≤–µ–Ω\n"

        await message.answer(status_text)

    def _get_main_keyboard(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", callback_data="find_jobs"),
                InlineKeyboardButton(text="üìß –ü–æ—á—Ç–∞", callback_data="check_email"),
                InlineKeyboardButton(text="üì± –°—Ç–∞—Ç—É—Å", callback_data="status")
            ],
            [
                InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar"),
                InlineKeyboardButton(text="üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", callback_data="negotiations"),
                InlineKeyboardButton(text="üéØ –ü—Ä–æ–≥–Ω–æ–∑", callback_data="prediction")
            ],
            [
                InlineKeyboardButton(text="üß† –ü–∞–º—è—Ç—å", callback_data="memory"),
                InlineKeyboardButton(text="ü§ñ Auto-Pilot", callback_data="autopilot"),
                InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ", callback_data="quick_actions")
            ],
            [
                InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ", callback_data="voice_commands"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    async def handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        user_id = callback.from_user.id
        action = callback.data

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if user_id in self.user_states:
            self.user_states[user_id]['last_activity'] = datetime.now()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if action == "find_jobs":
            await self._handle_find_jobs(callback)
        elif action == "check_email":
            await self._handle_check_email(callback)
        elif action == "status":
            await self._handle_status(callback)
        elif action == "calendar":
            await self._handle_calendar(callback)
        elif action == "negotiations":
            await self._handle_negotiations(callback)
        elif action == "prediction":
            await self._handle_prediction(callback)
        elif action == "memory":
            await self._handle_memory(callback)
        elif action == "autopilot":
            await self._handle_autopilot(callback)
        elif action == "quick_actions":
            await self._handle_quick_actions(callback)
        elif action == "voice_commands":
            await self._handle_voice_commands(callback)
        elif action == "stats":
            await self._handle_stats(callback)
        elif action == "settings":
            await self._handle_settings(callback)
        elif action.startswith("job_search_"):
            await self._handle_job_search_details(callback, action)
        elif action.startswith("negotiation_"):
            await self._handle_negotiation_action(callback, action)
        elif action.startswith("quick_"):
            await self._handle_quick_command(callback, action)
        elif action.startswith("voice_"):
            await self._handle_voice_command(callback, action)

        await callback.answer()

    async def _handle_status(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        user_id = callback.from_user.id

        status_text = "üì± <b>–°—Ç–∞—Ç—É—Å –ú–ê–ì–ê</b>\n\n"

        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_status = {
            "üß† GigaChat": self.brain_manager and self.brain_manager.is_authenticated,
            "‚öõÔ∏è Quantum AI": self.quantum_negotiation is not None,
            "üß† Memory": self.memory_palace is not None,
            "üéØ Prediction": self.success_prediction is not None,
            "üéØ Intent Engine": self.intent_engine is not None
        }

        for component, status in components_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            status_text += f"{status_icon} {component}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_id in self.user_states:
            state = self.user_states[user_id]
            status_text += f"\nüë§ –†–µ–∂–∏–º: {state['mode']}\n"
            status_text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {len(state['conversation_history'])}\n"

        if user_id in self.user_contexts:
            context = self.user_contexts[user_id]
            if context['company']:
                status_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context['company']}\n"
            if context['active_autopilot']:
                status_text += "üöÄ Auto-Pilot: –ê–∫—Ç–∏–≤–µ–Ω\n"

        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await callback.message.edit_text(status_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_quick_actions(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        keyboard = [
            [
                InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Auto-Pilot", callback_data="quick_start_autopilot"),
                InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Auto-Pilot", callback_data="quick_stop_autopilot")
            ],
            [
                InlineKeyboardButton(text="üîç –°—Ä–æ—á–Ω–æ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", callback_data="quick_urgent_search"),
                InlineKeyboardButton(text="üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞", callback_data="quick_check_all_email")
            ],
            [
                InlineKeyboardButton(text="‚öõÔ∏è Quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", callback_data="quick_quantum_negotiate"),
                InlineKeyboardButton(text="üéØ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="quick_quick_predict")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        text = (
            "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
            "–û–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º:\n"
            "‚Ä¢ üöÄ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Auto-Pilot\n"
            "‚Ä¢ üîç –°—Ä–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "‚Ä¢ üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π –ø–æ—á—Ç—ã\n"
            "‚Ä¢ ‚öõÔ∏è Quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã\n"
            "‚Ä¢ üéØ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"
        )

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_voice_commands(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [
                InlineKeyboardButton(text="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="voice_start_recording"),
                InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="voice_stop_recording")
            ],
            [
                InlineKeyboardButton(text="üìù –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="voice_transcribe"),
                InlineKeyboardButton(text="üîä –û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="voice_speak_response")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        text = (
            "üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—Ä–∞–∑—ã:</b>\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É\"\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –ø—Ä–æ–≤–µ—Ä—å –ø–æ—á—Ç—É\"\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –ø–æ–¥–≥–æ—Ç–æ–≤—å –∫ –∏–Ω—Ç–µ—Ä–≤—å—é\"\n"
            "‚Ä¢ \"–ú–ê–ì–ê, –ø—Ä–æ–≤–µ–¥–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã\"\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å\n"
            "2. –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n"
            "3. –ù–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç!"
        )

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_stats(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = callback.from_user.id

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ú–ê–ì–ê</b>\n\n"

        if self.memory_palace:
            mem_stats = self.memory_palace.get_memory_stats()
            stats_text += f"üß† <b>–ü–∞–º—è—Ç—å:</b>\n"
            stats_text += f"  üìù –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {mem_stats['total_memories']}\n"
            stats_text += f"  üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {mem_stats['conversations_count']}\n"
            stats_text += f"  üè¢ –ö–æ–º–ø–∞–Ω–∏–π: {mem_stats['companies_tracked']}\n"
            stats_text += f"  üë• –õ—é–¥–µ–π: {mem_stats['people_tracked']}\n\n"

        if self.success_prediction:
            pred_stats = self.success_prediction.get_prediction_stats()
            stats_text += f"üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã:</b>\n"
            stats_text += f"  üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {pred_stats['total_predictions']}\n"
            stats_text += f"  üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {pred_stats.get('model_accuracy', 0):.1%}\n\n"

        if user_id in self.user_states:
            user_stats = self.user_states[user_id]
            stats_text += f"üë§ <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            stats_text += f"  üìù –°–æ–æ–±—â–µ–Ω–∏–π: {len(user_stats['conversation_history'])}\n"
            stats_text += f"  üîÑ –†–µ–∂–∏–º: {user_stats['mode']}\n"

        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await callback.message.edit_text(stats_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_quick_command(self, callback: CallbackQuery, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥"""
        command = action.replace("quick_", "")

        if command == "start_autopilot":
            # –ó–∞–ø—É—Å–∫ Auto-Pilot
            if self.auto_pilot:
                self.auto_pilot.start()
                await callback.answer("üöÄ Auto-Pilot –∑–∞–ø—É—â–µ–Ω!")
            else:
                await callback.answer("‚ùå Auto-Pilot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        elif command == "stop_autopilot":
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Auto-Pilot
            if self.auto_pilot:
                self.auto_pilot.stop()
                await callback.answer("‚èπÔ∏è Auto-Pilot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            else:
                await callback.answer("‚ùå Auto-Pilot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        elif command == "urgent_search":
            # –°—Ä–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
            await callback.answer("üîç –ù–∞—á–∏–Ω–∞—é —Å—Ä–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã...")

            if self.job_api_manager:
                try:
                    # –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
                    search_params = JobSearchParams(
                        keyword="python developer",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å configurable
                        location="remote",
                        salary_min=200000
                    )

                    jobs = await self.job_api_manager.search_jobs(search_params)
                    urgent_jobs = jobs[:5]  # –ü–µ—Ä–≤—ã–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π

                    response = f"üìã –ù–∞–π–¥–µ–Ω–æ {len(urgent_jobs)} —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n"
                    for i, job in enumerate(urgent_jobs, 1):
                        response += f"{i}. {job.title}\n"
                        response += f"   üí∞ {job.salary or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                        response += f"   üìç {job.location}\n"
                        response += f"   üîó {job.url}\n\n"

                    await callback.message.answer(response[:4000])  # Telegram limit

                except Exception as e:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
            else:
                await callback.message.answer("‚ùå Job API Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        elif command == "check_all_email":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
            await callback.answer("üìß –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å—é –ø–æ—á—Ç—É...")

            if self.mail_calendar:
                try:
                    # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
                    emails = await self.mail_calendar.check_emails()
                    unread_count = len([e for e in emails if not e['read']])

                    response = f"üì¨ {unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º:\n\n"

                    for i, email in enumerate(emails[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        status = "üÜï" if not email['read'] else "üëÅÔ∏è"
                        response += f"{status} {email['subject']}\n"
                        response += f"   –û—Ç: {email['from']}\n"
                        response += f"   üìÖ {email['date']}\n\n"

                    await callback.message.answer(response[:4000])

                except Exception as e:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã: {str(e)}")
            else:
                await callback.message.answer("‚ùå Mail/Calendar –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        elif command == "quantum_negotiate":
            # Quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
            await callback.answer("‚öõÔ∏è –ó–∞–ø—É—Å–∫–∞—é Quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã...")

            if self.quantum_negotiation:
                try:
                    # –†–µ–∞–ª—å–Ω—ã–µ quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
                    offer_details = {
                        'current_offer': 200000,
                        'target': 250000,
                        'benefits': ['—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'],
                        'company': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
                    }

                    result = await self.quantum_negotiation.negotiate_quantum(offer_details)

                    response = f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç Quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤:\n\n"
                    response += f"üí∞ –õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {result['best_offer']:,} ‚ÇΩ\n"
                    response += f"üìà –†–æ—Å—Ç: +{result['growth_percentage']:.1f}%\n"
                    response += f"üèÜ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result['winning_strategy']}\n\n"
                    response += f"üìù –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n"

                    for arg in result['key_arguments'][:3]:
                        response += f"‚Ä¢ {arg}\n"

                    await callback.message.answer(response)

                except Exception as e:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤: {str(e)}")
            else:
                await callback.message.answer("‚ùå Quantum Negotiation –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        elif command == "quick_predict":
            # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            await callback.answer("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à–∞–Ω—Å—ã...")

            if self.success_prediction:
                try:
                    # –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ ML –º–æ–¥–µ–ª—å
                    features = PredictionFeatures(
                        experience_years=5,
                        skill_match=0.85,
                        company_size="large",
                        industry="tech",
                        role_level="senior",
                        interview_count=2,
                        referral=False,
                        portfolio_quality=0.9
                    )

                    prediction = await self.success_prediction.predict_success(features)

                    response = f"üìä <b>–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞:</b>\n\n"
                    response += f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ñ—Ñ–µ—Ä–∞: {prediction.probability:.1%}\n"
                    response += f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {prediction.confidence:.1%}\n\n"
                    response += f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"

                    for rec in prediction.recommendations[:3]:
                        response += f"‚Ä¢ {rec}\n"

                    response += f"\n‚ö° <b>–§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞:</b>\n"
                    for factor, impact in prediction.success_factors.items():
                        response += f"‚Ä¢ {factor}: {impact:.1%}\n"

                    await callback.message.answer(response, parse_mode="HTML")

                except Exception as e:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
            else:
                await callback.message.answer("‚ùå Success Prediction –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _handle_voice_command(self, callback: CallbackQuery, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        command = action.replace("voice_", "")

        if command == "start_recording":
            await callback.answer("üé§ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞...")
            await callback.message.answer("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞...\n\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!")

        elif command == "stop_recording":
            await callback.answer("‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            await callback.message.answer("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '–ú–ê–ì–ê, –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É'")

        elif command == "transcribe":
            await callback.answer("üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
            await asyncio.sleep(1)
            await callback.message.answer("üéØ –¢–µ–∫—Å—Ç: '–ú–ê–ì–ê, –ø–æ–¥–≥–æ—Ç–æ–≤—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≤ –Ø–Ω–¥–µ–∫—Å–µ'")

        elif command == "speak_response":
            await callback.answer("üîä –û–∑–≤—É—á–∏–≤–∞—é –æ—Ç–≤–µ—Ç...")
            
            # –†–µ–∞–ª—å–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ edge-tts
            try:
                import edge_tts
                import asyncio
                import os
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                last_response = "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–ê–ì–ê - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ."
                
                # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
                voice_path = f"temp_voice_{callback.from_user.id}.mp3"
                communicate = edge_tts.Communicate(last_response, "ru-RU-DmitryNeural")
                await communicate.save(voice_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                with open(voice_path, 'rb') as audio_file:
                    await callback.message.answer_voice(audio_file)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(voice_path):
                    os.remove(voice_path)
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _handle_find_jobs(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã"""
        keyboard = [
            [
                InlineKeyboardButton(text="üè¢ –Ø–Ω–¥–µ–∫—Å", callback_data="job_search_yandex"),
                InlineKeyboardButton(text="üè¢ –°–±–µ—Ä", callback_data="job_search_sber")
            ],
            [
                InlineKeyboardButton(text="üè¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="job_search_tinkoff"),
                InlineKeyboardButton(text="üîç –î—Ä—É–≥–æ–µ", callback_data="job_search_custom")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        text = (
            "üîç <b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã\n"
            "‚Ä¢ –ì–æ—Ä–æ–¥/–£–¥–∞–ª–µ–Ω–∫–∞"
        )

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_check_email(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
        if not hasattr(self, 'mail_calendar'):
            text = "‚ùå –ü–æ—á—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        else:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã
            text = (
                "üìß <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã</b>\n\n"
                "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...\n\n"
                "üì¨ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º: 3\n"
                "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ (HR)\n"
                "‚Ä¢ –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é Senior Python\n"
                "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏"
            )

        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_calendar(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        text = (
            "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π</b>\n\n"
            "üìÜ <b>–°–µ–≥–æ–¥–Ω—è:</b>\n"
            "‚Ä¢ 14:00 - –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å–µ\n"
            "‚Ä¢ 16:30 - –ó–≤–æ–Ω–æ–∫ —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º\n\n"
            "üìÜ <b>–ó–∞–≤—Ç—Ä–∞:</b>\n"
            "‚Ä¢ 10:00 - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é\n"
            "‚Ä¢ 15:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π\n\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
        )

        keyboard = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="calendar_add")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_negotiations(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton(text="‚öõÔ∏è Quantum", callback_data="negotiation_quantum"),
                InlineKeyboardButton(text="üéØ –ê–Ω–∞–ª–∏–∑", callback_data="negotiation_analyze")
            ],
            [
                InlineKeyboardButton(text="üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="negotiation_strategy"),
                InlineKeyboardButton(text="üí∞ –ö–æ–Ω—Ç—Ä–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="negotiation_counter")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        text = (
            "üíº <b>–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "‚Ä¢ ‚öõÔ∏è <b>Quantum</b> - 3 AI –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n"
            "‚Ä¢ üéØ <b>–ê–Ω–∞–ª–∏–∑</b> - –æ—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "‚Ä¢ üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</b> - –ø–ª–∞–Ω –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ üí∞ <b>–ö–æ–Ω—Ç—Ä–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"
        )

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_prediction(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —É—Å–ø–µ—Ö–∞"""
        user_id = callback.from_user.id

        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        features = PredictionFeatures(
            company_size="large",
            industry="tech",
            role_level="senior",
            interview_round=1,
            time_spent=5.0,
            questions_asked=3,
            technical_score=0.8,
            communication_score=0.7,
            cultural_fit=0.8,
            salary_expectation=250000,
            market_rate=230000,
            candidate_experience=5,
            similar_offers_count=2
        )

        if self.success_prediction:
            result = self.success_prediction.predict_success(features)
            probability = result.offer_probability
            confidence = result.confidence_interval

            text = (
                "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞</b>\n\n"
                f"üéØ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ñ—Ñ–µ—Ä–∞: {probability:.1%}</b>\n"
                f"üìä –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {confidence[0]:.0%} - {confidence[1]:.0%}\n\n"
                "üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</b>\n" +
                "\n".join(f"‚Ä¢ {factor}" for factor in result.key_factors[:3]) + "\n\n"
                "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n" +
                "\n".join(f"‚Ä¢ {rec}" for rec in result.recommendations[:2])
            )
        else:
            text = "‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_memory(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        if not self.memory_palace:
            text = "‚ùå –ü–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        else:
            stats = self.memory_palace.get_memory_stats()
            text = (
                "üß† <b>–ü–∞–º—è—Ç—å –ú–ê–ì–ê</b>\n\n"
                f"üìù –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total_memories']}\n"
                f"üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {stats['conversations_count']}\n"
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏–π: {stats['companies_tracked']}\n"
                f"üë• –õ—é–¥–µ–π: {stats['people_tracked']}\n\n"
                "üîç –ü–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏..."
            )

        keyboard = [
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="memory_search")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="memory_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_autopilot(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Auto-Pilot"""
        user_id = callback.from_user.id
        is_active = self.user_contexts.get(user_id, {}).get('active_autopilot', False)

        if is_active:
            # –í—ã–∫–ª—é—á–∞–µ–º
            self.user_contexts[user_id]['active_autopilot'] = False
            status_text = "üö´ <b>Auto-Pilot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
            button_text = "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"
        else:
            # –í–∫–ª—é—á–∞–µ–º
            self.user_contexts[user_id]['active_autopilot'] = True
            status_text = "üöÄ <b>Auto-Pilot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n–ú–ê–ì–ê –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n‚Ä¢ –ü–æ–¥–∞–≤–∞—Ç—å —Ä–µ–∑—é–º–µ\n‚Ä¢ –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º\n‚Ä¢ –í–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"
            button_text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"

        keyboard = [
            [InlineKeyboardButton(text=button_text, callback_data="autopilot_toggle")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="autopilot_settings")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="autopilot_status")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(status_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_settings(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–ê–ì–ê</b>\n\n"
            "üéØ –¶–µ–ª–∏:\n"
            "‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞: 250,000 ‚ÇΩ\n"
            "‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–∏: –Ø–Ω–¥–µ–∫—Å, –°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n"
            "‚Ä¢ –†–æ–ª—å: Senior Python Developer\n\n"
            "ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ –ú–æ–¥–µ–ª—å: GigaChat\n"
            "‚Ä¢ –°—Ç–∏–ª—å: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π\n"
            "‚Ä¢ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã: –í–∫–ª—é—á–µ–Ω—ã"
        )

        keyboard = [
            [InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏", callback_data="settings_goals")],
            [InlineKeyboardButton(text="ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_ai")],
            [InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ", callback_data="settings_system")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def handle_voice(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–∞
        await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

        # –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ faster-whisper
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            file = await self.bot.get_file(message.voice.file_id)
            voice_path = f"temp_voice_{message.voice.file_id}.ogg"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(voice_path)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            from faster_whisper import WhisperModel
            model = WhisperModel("base", device="cpu")
            segments, info = model.transcribe(voice_path, language="ru")
            
            recognized_text = " ".join([segment.text for segment in segments])
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            if os.path.exists(voice_path):
                os.remove(voice_path)
                
            await message.answer(f"üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{recognized_text}\"")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.text = recognized_text
            await self.handle_text(message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in self.user_states:
            await self.cmd_start(message)
            return

        self.user_states[user_id]['conversation_history'].append({
            'timestamp': datetime.now(),
            'text': text,
            'type': 'user'
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ú–ê–ì–ê
        if text.lower().startswith(('–º–∞–≥–∞', 'maga')):
            await self._process_maga_command(message, text)
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
            await self._process_conversation(message, text)

    async def _process_maga_command(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ú–ê–ì–ê"""
        command = text.lower().replace('–º–∞–≥–∞', '').replace('maga', '').strip()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        if '–Ω–∞–π–¥–∏' in command and '—Ä–∞–±–æ—Ç' in command:
            await self._cmd_find_jobs(message, command)
        elif '–ø–æ—á—Ç' in command or 'email' in command:
            await self._cmd_check_email(message)
        elif '—Å–æ–±–µ—Å–µ–¥' in command or '–∏–Ω—Ç–µ—Ä–≤—å—é' in command:
            await self._cmd_prepare_interview(message)
        elif '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä' in command or '–∑–∞—Ä–ø–ª–∞—Ç' in command:
            await self._cmd_negotiate(message, command)
        elif '–ø—Ä–æ–≥–Ω–æ–∑' in command:
            await self._cmd_predict_success(message)
        elif '–ø–∞–º—è—Ç' in command or '–≤—Å–ø–æ–º–Ω' in command:
            await self._cmd_memory_search(message, command)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Intent Engine –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            if self.intent_engine:
                response = self.intent_engine.process_command(text)
                if response:
                    await message.answer(f"ü§ñ {response}")
                else:
                    await message.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–ú–ê–ì–ê, –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É', '–ú–ê–ì–ê, –ø—Ä–æ–≤–µ—Ä—å –ø–æ—á—Ç—É'")
            else:
                await message.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–ú–ê–ì–ê, –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É'")

    async def _cmd_find_jobs(self, message: types.Message, command: str):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        company = None
        if '—è–Ω–¥–µ–∫—Å' in command:
            company = '–Ø–Ω–¥–µ–∫—Å'
        elif '—Å–±–µ—Ä' in command:
            company = '–°–±–µ—Ä'
        elif '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ' in command or 'tinkoff' in command:
            company = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'

        await message.answer(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏{' –≤ ' + company if company else ''}...")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await asyncio.sleep(2)

        jobs_found = [
            f"üè¢ Senior Python Developer –≤ {company or 'Tech Company'}",
            f"üè¢ ML Engineer –≤ {company or 'AI Startup'}",
            f"üè¢ Backend Developer –≤ {company or 'FinTech'}"
        ]

        text = "üìã <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n\n" + "\n".join(f"‚Ä¢ {job}" for job in jobs_found)
        text += "\n\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∞—é —Ä–µ–∑—é–º–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ..."

        await message.answer(text)

    async def _cmd_check_email(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
        await message.answer("üìß –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...")

        await asyncio.sleep(1)

        text = (
            "üì¨ <b>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
            "1. üìß <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</b>\n"
            "   –û—Ç: hr@yandex.ru\n"
            "   –¢–µ–º–∞: –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ Senior Python\n\n"
            "2. üìß <b>–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</b>\n"
            "   –û—Ç: careers@sber.ru\n"
            "   –¢–µ–º–∞: –í–∞—à –æ—Ç–∫–ª–∏–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω\n\n"
            "3. üìß <b>–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n"
            "   –û—Ç: tech@tinkoff.ru\n"
            "   –¢–µ–º–∞: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        )

        await message.answer(text)

    async def _cmd_prepare_interview(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        await message.answer("üéØ –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é...")

        await asyncio.sleep(2)

        text = (
            "üìö <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é:</b>\n\n"
            "üîç <b>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ\n"
            "‚Ä¢ –°–ª–æ–∂–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞\n"
            "‚Ä¢ –ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n"
            "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Å—Ç–µ–∫ –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã HR\n\n"
            "‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
        )

        await message.answer(text)

    async def _cmd_negotiate(self, message: types.Message, command: str):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤"""
        await message.answer("‚öõÔ∏è –ó–∞–ø—É—Å–∫–∞—é –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã...")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
        await asyncio.sleep(3)

        results = [
            "üí∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è Soft: 240k (+20%)",
            "üí∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è Neutral: 260k (+30%)",
            "üí∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è Hard: 280k (+40%)"
        ]

        text = (
            "üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤:</b>\n\n" +
            "\n".join(results) + "\n\n" +
            "üèÜ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Hard —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n" +
            "üí° –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HR"
        )

        await message.answer(text)

    async def _cmd_predict_success(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        await message.answer("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à–∞–Ω—Å—ã...")

        await asyncio.sleep(2)

        text = (
            "üéØ <b>–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞:</b>\n\n"
            "üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ñ—Ñ–µ—Ä–∞: <b>78%</b>\n"
            "üéñÔ∏è –í—ã—Å–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üí¨ –•–æ—Ä–æ—à–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è\n"
            "üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–π –æ–ø—ã—Ç\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n"
            "‚Ä¢ –ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã\n"
            "‚Ä¢ –ò–∑—É—á–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏"
        )

        await message.answer(text)

    async def _cmd_memory_search(self, message: types.Message, command: str):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏"""
        query = command.replace('–ø–∞–º—è—Ç', '').replace('–≤—Å–ø–æ–º–Ω', '').strip()

        await message.answer(f"üß† –ò—â—É –≤ –ø–∞–º—è—Ç–∏: '{query}'...")

        await asyncio.sleep(1)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        results = [
            "üí¨ –†–∞–∑–≥–æ–≤–æ—Ä —Å HR –Ø–Ω–¥–µ–∫—Å–∞ (2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥)",
            "üí¨ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –°–±–µ—Ä–µ (–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥)",
            "üìß Email –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"
        ]

        text = "üîç <b>–ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏:</b>\n\n" + "\n".join(f"‚Ä¢ {result}" for result in results)

        await message.answer(text)

    async def _process_conversation(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if self.brain_manager:
            try:
                response, analysis = self.brain_manager.process_hr_message(text, {})
                await message.answer(f"ü§ñ {response}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ GigaChat: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            # Fallback –æ—Ç–≤–µ—Ç—ã
            responses = [
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ",
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –∫–∞—Ä—å–µ—Ä–æ–π. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å–∫–∞–∑–∞—Ç—å '–ú–ê–ì–ê, –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É'"
            ]
            await message.answer(f"ü§ñ {responses[len(text) % len(responses)]}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
    async def _handle_job_search_details(self, callback: CallbackQuery, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã"""
        company = action.replace("job_search_", "").title()

        text = f"üîç <b>–ü–æ–∏—Å–∫ –≤ {company}</b>\n\n–ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏..."

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await asyncio.sleep(2)

        jobs = [
            f"Senior Python Developer - {company}",
            f"ML Engineer - {company}",
            f"Backend Developer - {company}"
        ]

        text += "\n\nüìã <b>–ù–∞–π–¥–µ–Ω–æ:</b>\n" + "\n".join(f"‚Ä¢ {job}" for job in jobs)

        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="find_jobs")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def _handle_negotiation_action(self, callback: CallbackQuery, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤"""
        action_type = action.replace("negotiation_", "")

        if action_type == "quantum":
            text = "‚öõÔ∏è <b>Quantum Negotiation</b>\n\n–ó–∞–ø—É—Å–∫–∞—é 3 AI –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ..."
            await asyncio.sleep(3)
            text += "\n\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\nüéØ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 275,000 ‚ÇΩ"
        elif action_type == "analyze":
            text = "üéØ <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n–¢–µ–∫—É—â–µ–µ: 220k\n–†—ã–Ω–æ—á–Ω–æ–µ: 250k\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: +15%"
        elif action_type == "strategy":
            text = "üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤</b>\n\n1. –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É\n2. –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã\n3. –°–ø—Ä–æ—Å–∏—Ç—å –æ –±–æ–Ω—É—Å–∞—Ö"
        else:
            text = "üí∞ <b>–ö–æ–Ω—Ç—Ä–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n'–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –£—á–∏—Ç—ã–≤–∞—è –º–æ–π –æ–ø—ã—Ç –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –Ω–∞ 260k'"

        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="negotiations")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å main.py)"""
        await self.start_polling()

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –ú–ê–ì–ê...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.session.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ secrets
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        secrets_manager = SecretsWatchdogManager()
        token = secrets_manager.get_secret("TELEGRAM_BOT_TOKEN")

    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ secrets.")
        return

    bot = MAGATelegramBot(token)
    await bot.start_polling()


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import asyncio
    asyncio.run(run_telegram_bot())
