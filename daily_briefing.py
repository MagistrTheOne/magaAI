# -*- coding: utf-8 -*-
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—Ä–∏—Ñ–∏–Ω–≥ - —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Å–≤–æ–¥–∫–∏
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import logging

try:
    from mail_calendar import MailCalendar
    from job_apis import JobAPIManager
    from memory_palace import MemoryPalace
    from secrets_watchdog import SecretsWatchdogManager
    COMPONENTS_AVAILABLE = True
except ImportError as e:
    print(f"Warning: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    COMPONENTS_AVAILABLE = False


@dataclass
class BriefingData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
    date: str
    time_type: str  # 'morning' –∏–ª–∏ 'evening'
    calendar_events: List[Dict]
    emails_summary: Dict
    job_applications: List[Dict]
    reminders: List[str]
    weather: Optional[Dict] = None
    news_summary: Optional[str] = None


class DailyBriefing:
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—Ä–∏—Ñ–∏–Ω–≥ - —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    """
    
    def __init__(self):
        self.logger = logging.getLogger("DailyBriefing")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.mail_calendar = None
        self.job_api_manager = None
        self.memory_palace = None
        self.secrets_manager = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = {
            'morning_time': '08:00',
            'evening_time': '20:00',
            'include_weather': True,
            'include_news': True,
            'max_events': 5,
            'max_emails': 10
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_components()
    
    def _init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            if not COMPONENTS_AVAILABLE:
                self.logger.warning("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            
            # Secrets Manager
            self.secrets_manager = SecretsWatchdogManager()
            
            # Mail Calendar
            self.mail_calendar = MailCalendar()
            
            # Job API Manager
            self.job_api_manager = JobAPIManager()
            
            # Memory Palace
            self.memory_palace = MemoryPalace()
            
            self.logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Daily Briefing –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    async def generate_morning_briefing(self) -> BriefingData:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
        self.logger.info("üåÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞...")
        
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        calendar_events = await self._get_today_events()
        emails_summary = await self._get_emails_summary()
        job_applications = await self._get_job_applications()
        reminders = await self._get_reminders()
        weather = await self._get_weather() if self.config['include_weather'] else None
        news_summary = await self._get_news_summary() if self.config['include_news'] else None
        
        return BriefingData(
            date=today,
            time_type='morning',
            calendar_events=calendar_events,
            emails_summary=emails_summary,
            job_applications=job_applications,
            reminders=reminders,
            weather=weather,
            news_summary=news_summary
        )
    
    async def generate_evening_briefing(self) -> BriefingData:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
        self.logger.info("üåô –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞...")
        
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
        calendar_events = await self._get_today_events()
        emails_summary = await self._get_emails_summary()
        job_applications = await self._get_job_applications()
        reminders = await self._get_reminders()
        
        # –í–µ—á–µ—Ä–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        daily_summary = await self._get_daily_summary()
        
        return BriefingData(
            date=today,
            time_type='evening',
            calendar_events=calendar_events,
            emails_summary=emails_summary,
            job_applications=job_applications,
            reminders=reminders,
            weather=None,
            news_summary=daily_summary
        )
    
    async def _get_today_events(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            if not self.mail_calendar:
                return []
            
            events = await self.mail_calendar.get_today_events()
            return events[:self.config['max_events']]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    async def _get_emails_summary(self) -> Dict:
        """–°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—á—Ç–µ"""
        try:
            if not self.mail_calendar:
                return {"unread": 0, "important": 0, "pending": 0}
            
            emails = await self.mail_calendar.check_emails()
            
            unread = len([e for e in emails if not e.get('read', False)])
            important = len([e for e in emails if e.get('important', False)])
            pending = len([e for e in emails if e.get('pending_reply', False)])
            
            return {
                "unread": unread,
                "important": important,
                "pending": pending,
                "total": len(emails)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—á—Ç—ã: {e}")
            return {"unread": 0, "important": 0, "pending": 0, "total": 0}
    
    async def _get_job_applications(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
        try:
            if not self.job_api_manager:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
            applications = await self.job_api_manager.get_recent_applications()
            return applications[:5]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    async def _get_reminders(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            if not self.memory_palace:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
            reminders = await self.memory_palace.get_reminders()
            return reminders[:5]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
    
    async def _get_weather(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenWeatherMap API
            return {
                "temperature": "22¬∞C",
                "condition": "–Ø—Å–Ω–æ",
                "humidity": "65%"
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return None
    
    async def _get_news_summary(self) -> Optional[str]:
        """–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RSS –∏–ª–∏ News API
            return "–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≠–∫–æ–Ω–æ–º–∏–∫–∞, –ü–æ–ª–∏—Ç–∏–∫–∞"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return None
    
    async def _get_daily_summary(self) -> Optional[str]:
        """–°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å"""
        try:
            if not self.memory_palace:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
            summary = await self.memory_palace.get_daily_summary()
            return summary
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ –¥–µ–Ω—å: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏"
    
    def format_briefing(self, briefing: BriefingData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∏—Ñ–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        time_emoji = "üåÖ" if briefing.time_type == 'morning' else "üåô"
        time_text = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if briefing.time_type == 'morning' else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        text = f"{time_emoji} <b>{time_text} –±—Ä–∏—Ñ–∏–Ω–≥</b>\n"
        text += f"üìÖ {briefing.date}\n\n"
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        if briefing.calendar_events:
            text += "üìÖ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            for event in briefing.calendar_events:
                text += f"‚Ä¢ {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} –≤ {event.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += "\n"
        
        # –ü–æ—á—Ç–∞
        if briefing.emails_summary:
            text += "üìß <b>–ü–æ—á—Ç–∞:</b>\n"
            text += f"‚Ä¢ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {briefing.emails_summary.get('unread', 0)}\n"
            text += f"‚Ä¢ –í–∞–∂–Ω—ã—Ö: {briefing.emails_summary.get('important', 0)}\n"
            text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {briefing.emails_summary.get('pending', 0)}\n\n"
        
        # –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
        if briefing.job_applications:
            text += "üíº <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É:</b>\n"
            for app in briefing.job_applications:
                text += f"‚Ä¢ {app.get('company', '–ö–æ–º–ø–∞–Ω–∏—è')} - {app.get('status', '–°—Ç–∞—Ç—É—Å')}\n"
            text += "\n"
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if briefing.reminders:
            text += "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
            for reminder in briefing.reminders:
                text += f"‚Ä¢ {reminder}\n"
            text += "\n"
        
        # –ü–æ–≥–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ–º)
        if briefing.weather and briefing.time_type == 'morning':
            text += f"üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞:</b> {briefing.weather.get('temperature', 'N/A')}, {briefing.weather.get('condition', 'N/A')}\n\n"
        
        # –ù–æ–≤–æ—Å—Ç–∏/—Å–≤–æ–¥–∫–∞
        if briefing.news_summary:
            if briefing.time_type == 'morning':
                text += f"üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏:</b> {briefing.news_summary}\n\n"
            else:
                text += f"üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å:</b> {briefing.news_summary}\n\n"
        
        text += "ü§ñ <i>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ú–ê–ì–ê AI</i>"
        
        return text
    
    async def send_briefing(self, briefing: BriefingData, chat_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
        try:
            formatted_text = self.format_briefing(briefing)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
            # –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Windows overlay
            
            self.logger.info(f"–ë—Ä–∏—Ñ–∏–Ω–≥ {briefing.time_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return formatted_text
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–∏—Ñ–∏–Ω–≥–∞: {e}")
            return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_briefing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
    briefing = DailyBriefing()
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥
    morning = await briefing.generate_morning_briefing()
    print("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥:")
    print(briefing.format_briefing(morning))
    
    print("\n" + "="*50 + "\n")
    
    # –í–µ—á–µ—Ä–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥
    evening = await briefing.generate_evening_briefing()
    print("üåô –í–µ—á–µ—Ä–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥:")
    print(briefing.format_briefing(evening))


if __name__ == "__main__":
    asyncio.run(test_briefing())
