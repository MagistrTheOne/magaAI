# -*- coding: utf-8 -*-
"""
AI –ú–ê–ì–ò–°–¢–† - –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
"""

import asyncio
import threading
import time
from datetime import datetime
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from gigachat_integration import AIMagistrBrain
from computer_vision import MeetingMonitor
from job_search_api import NegotiationAssistant


class DigitalTwin:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ AI –ú–ê–ì–ò–°–¢–†
    """
    
    def __init__(self, giga_chat_api_key: str):
        # –ú–æ–¥—É–ª–∏
        self.brain = AIMagistrBrain(giga_chat_api_key)
        self.vision = MeetingMonitor()
        self.negotiator = NegotiationAssistant()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_active = False
        self.current_interview = None
        self.conversation_context = []
        self.salary_target = 200000
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.auto_response_enabled = True
        self.vision_monitoring_enabled = True
        self.negotiation_mode = "aggressive"
        
    def start_interview_session(self, job_info: Dict):
        """
        –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        """
        try:
            self.current_interview = job_info
            self.is_active = True
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º
            negotiation_plan = self.negotiator.prepare_negotiation(
                job_info.get("position", "Developer"),
                self.salary_target
            )
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞
            if self.vision_monitoring_enabled:
                self.vision.start_monitoring()
            
            print("ü§ñ AI –ú–ê–ì–ò–°–¢–† –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            print(f"üí∞ –¶–µ–ª–µ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${self.salary_target:,}")
            print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {negotiation_plan.get('strategy', 'aggressive')}")
            print(f"üìä –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è —Å–∏–ª–∞: {negotiation_plan.get('negotiation_power', {}).get('negotiation_strength', 'unknown')}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def stop_interview_session(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
        """
        try:
            self.is_active = False
            self.vision.stop_monitoring()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self._save_session_results()
            
            print("ü§ñ AI –ú–ê–ì–ò–°–¢–† –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.conversation_context)} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    def process_hr_message(self, message: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è HR
        """
        if not self.is_active:
            return ""
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            screen_context = {}
            if self.vision_monitoring_enabled:
                screen_analysis = self.vision.get_current_analysis()
                if screen_analysis:
                    screen_context = {
                        "text_content": screen_analysis.get("text_content", ""),
                        "job_keywords": screen_analysis.get("job_keywords", []),
                        "is_presentation": screen_analysis.get("is_presentation", False)
                    }
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = {
                "message": message,
                "screen_context": screen_context,
                "interview_info": self.current_interview,
                "salary_target": self.salary_target,
                "conversation_history": self.conversation_context[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            }
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –º–æ–∑–≥
            response = self.brain.analyze_hr_message(message, context)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.conversation_context.append({
                "timestamp": datetime.now().isoformat(),
                "hr_message": message,
                "ai_response": response,
                "context": context
            })
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
    
    def get_negotiation_advice(self, hr_offer: int) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º
        """
        try:
            if not self.current_interview:
                return {}
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è HR
            counter_strategy = self.negotiator.get_counter_offer_strategy(
                hr_offer, 
                self.salary_target
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            market_data = self.negotiator.job_search.get_market_data(
                self.current_interview.get("position", "Developer")
            )
            
            advice = {
                "hr_offer": hr_offer,
                "target_salary": self.salary_target,
                "difference": self.salary_target - hr_offer,
                "strategy": counter_strategy.get("strategy", "professional"),
                "message": counter_strategy.get("message", ""),
                "market_average": market_data.get("average_salary", 0),
                "negotiation_tips": self._get_negotiation_tips(hr_offer)
            }
            
            return advice
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞: {e}")
            return {}
    
    def _get_negotiation_tips(self, hr_offer: int) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º
        """
        tips = []
        
        if hr_offer < self.salary_target * 0.8:
            tips.append("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ç–∞–∫—Ç–∏–∫—É")
            tips.append("–£–ø–æ–º—è–Ω–∏—Ç–µ –æ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö")
        elif hr_offer < self.salary_target:
            tips.append("–ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ - –º–æ–∂–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è")
            tips.append("–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ equity –∏ –±–æ–Ω—É—Å—ã")
        else:
            tips.append("–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!")
            tips.append("–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ")
        
        return tips
    
    def _save_session_results(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏
        """
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"interview_session_{timestamp}.json"
            
            results = {
                "session_info": {
                    "start_time": self.conversation_context[0]["timestamp"] if self.conversation_context else None,
                    "end_time": datetime.now().isoformat(),
                    "job_info": self.current_interview,
                    "salary_target": self.salary_target
                },
                "conversation": self.conversation_context,
                "summary": self._generate_session_summary()
            }
            
            import json
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def _generate_session_summary(self) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏
        """
        if not self.conversation_context:
            return {}
        
        total_messages = len(self.conversation_context)
        salary_mentioned = any("–∑–∞—Ä–ø–ª–∞—Ç–∞" in msg["hr_message"].lower() or "salary" in msg["hr_message"].lower() 
                             for msg in self.conversation_context)
        
        return {
            "total_interactions": total_messages,
            "salary_discussed": salary_mentioned,
            "ai_personality": self.negotiation_mode,
            "success_indicators": {
                "hr_engaged": total_messages > 5,
                "salary_negotiation": salary_mentioned,
                "technical_discussion": any("python" in msg["hr_message"].lower() 
                                          for msg in self.conversation_context)
            }
        }
    
    def get_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
        """
        return {
            "is_active": self.is_active,
            "current_interview": self.current_interview,
            "conversation_count": len(self.conversation_context),
            "salary_target": self.salary_target,
            "negotiation_mode": self.negotiation_mode,
            "vision_monitoring": self.vision_monitoring_enabled,
            "auto_response": self.auto_response_enabled
        }


# =============== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–û–ô –£–¢–ò–õ–ò–¢–û–ô ===============

class DigitalTwinIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —É—Ç–∏–ª–∏—Ç–æ–π
    """
    
    def __init__(self, giga_chat_api_key: str):
        self.digital_twin = DigitalTwin(giga_chat_api_key)
        self.is_integrated = False
        
    def integrate_with_ghost_assistant(self, ghost_assistant):
        """
        –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ghost Assistant
        """
        try:
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ analyze_hr_message
            original_analyze = ghost_assistant.analyze_hr_message
            
            def enhanced_analyze(message: str) -> str:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫
                if self.digital_twin.is_active:
                    return self.digital_twin.process_hr_message(message)
                else:
                    return original_analyze(message)
            
            ghost_assistant.analyze_hr_message = enhanced_analyze
            self.is_integrated = True
            
            print("üîó –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Ghost Assistant")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
    
    def start_digital_twin_session(self, job_info: Dict):
        """
        –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
        """
        return self.digital_twin.start_interview_session(job_info)
    
    def stop_digital_twin_session(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
        """
        self.digital_twin.stop_interview_session()


# =============== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===============

def test_digital_twin():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ AI –ú–ê–ì–ò–°–¢–†...")
    
    # –°–æ–∑–¥–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫
    digital_twin = DigitalTwin("test_api_key")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ
    job_info = {
        "position": "Senior Python Developer",
        "company": "TechCorp",
        "location": "Remote",
        "description": "AI/ML team lead position"
    }
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏...")
    digital_twin.start_interview_session(job_info)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è HR
    test_messages = [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å Python",
        "–ö–∞–∫–∞—è —É –≤–∞—Å –∑–∞—Ä–ø–ª–∞—Ç–∞?",
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º $150k",
        "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å?",
        "–ö–∞–∫–∏–µ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã?"
    ]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in test_messages:
        print(f"\nüë§ HR: {message}")
        response = digital_twin.process_hr_message(message)
        print(f"ü§ñ AI –ú–ê–ì–ò–°–¢–†: {response}")
    
    # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º
    print("\nüí∞ –°–æ–≤–µ—Ç –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º:")
    advice = digital_twin.get_negotiation_advice(150000)
    print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {advice.get('strategy', 'unknown')}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {advice.get('message', '')}")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
    digital_twin.stop_interview_session()
    
    # –°—Ç–∞—Ç—É—Å
    status = digital_twin.get_status()
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {status}")


if __name__ == "__main__":
    test_digital_twin()
