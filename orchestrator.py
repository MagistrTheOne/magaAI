# -*- coding: utf-8 -*-
"""
Orchestrator - –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç: ghost_assistant_win.py, brain, vision, rag
"""

import os
import subprocess
import threading
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
import psutil
import requests
from loguru import logger
import sounddevice as sd


class HealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.checks = {}
    
    def check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def check_vb_cable(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ VB-CABLE"""
        try:
            devices = sd.query_devices()
            for device in devices:
                if "cable" in device["name"].lower():
                    return True
            return False
        except:
            return False
    
    def check_audio_devices(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        result = {"output": False, "input": False, "loopback": False}
        
        try:
            devices = sd.query_devices()
            for device in devices:
                if device["max_output_channels"] > 0:
                    result["output"] = True
                if device["max_input_channels"] > 0:
                    result["input"] = True
                if "loopback" in device["name"].lower():
                    result["loopback"] = True
        except:
            pass
        
        return result
    
    def check_vpn(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ VPN (–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤)"""
        test_domains = ["google.com", "github.com", "gigachat.devices.sberbank.ru"]
        
        for domain in test_domains:
            try:
                response = requests.get(f"https://{domain}", timeout=5)
                if response.status_code == 200:
                    return True
            except:
                continue
        return False
    
    def run_all_checks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        checks = {
            "ffmpeg": self.check_ffmpeg(),
            "vb_cable": self.check_vb_cable(),
            "audio": self.check_audio_devices(),
            "vpn": self.check_vpn(),
            "timestamp": datetime.now().isoformat()
        }
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        checks["overall"] = all([
            checks["ffmpeg"],
            checks["vb_cable"],
            checks["audio"]["output"],
            checks["audio"]["input"]
        ])
        
        return checks


class ProcessManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
    
    def __init__(self):
        self.processes = {}
        self.scripts = {
            "ghost_assistant": "ghost_assistant_win.py",
            "voice_trigger": "voice_trigger.py",
            "screen_scanner": "computer_vision.py",
            "job_search": "job_search_api.py"
        }
    
    def start_script(self, name: str, script_path: str, **kwargs) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞"""
        try:
            if name in self.processes:
                logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            cmd = ["python", script_path]
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                **kwargs
            )
            
            self.processes[name] = {
                "process": process,
                "script": script_path,
                "started_at": datetime.now(),
                "status": "running"
            }
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {name} ({script_path})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False
    
    def stop_script(self, name: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
        try:
            if name not in self.processes:
                logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True
            
            process_info = self.processes[name]
            process = process_info["process"]
            
            # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            process.terminate()
            process.wait(timeout=5)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if process.poll() is None:
                process.kill()
                process.wait(timeout=2)
            
            del self.processes[name]
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
            return False
    
    def get_process_status(self, name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if name not in self.processes:
            return None
        
        process_info = self.processes[name]
        process = process_info["process"]
        
        return {
            "name": name,
            "pid": process.pid,
            "status": "running" if process.poll() is None else "stopped",
            "started_at": process_info["started_at"],
            "uptime": (datetime.now() - process_info["started_at"]).total_seconds()
        }
    
    def get_all_status(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        return {name: self.get_process_status(name) for name in self.processes.keys()}
    
    def cleanup_dead_processes(self):
        """–û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        dead_processes = []
        
        for name, process_info in self.processes.items():
            process = process_info["process"]
            if process.poll() is not None:
                dead_processes.append(name)
        
        for name in dead_processes:
            logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
            del self.processes[name]


class Orchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, config_file: str = "orchestrator_config.json"):
        self.config_file = config_file
        self.health_checker = HealthChecker()
        self.process_manager = ProcessManager()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.monitor_thread = None
        self.stop_event = threading.Event()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.monitor_interval = 10.0  # —Å–µ–∫—É–Ω–¥—ã
        self.auto_restart = True
        self.health_check_interval = 30.0  # —Å–µ–∫—É–Ω–¥—ã
        
        # –õ–æ–≥–∏
        self.setup_logging()
        
        logger.info("Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs("logs", exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º loguru
        logger.add(
            "logs/orchestrator_{time:YYYY-MM-DD}.log",
            rotation="1 day",
            retention="7 days",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
        )
    
    def start_system(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = self.health_checker.run_all_checks()
        if not health["overall"]:
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
            logger.error(f"Health check: {health}")
            return False
        
        logger.info("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        success = True
        
        # 1. Ghost Assistant (–æ—Å–Ω–æ–≤–Ω–æ–π)
        if not self.process_manager.start_script("ghost_assistant", "ghost_assistant_win.py"):
            success = False
        
        # 2. Voice Trigger (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if os.path.exists("voice_trigger.py"):
            if not self.process_manager.start_script("voice_trigger", "voice_trigger.py"):
                logger.warning("Voice Trigger –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        
        # 3. Screen Scanner (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if os.path.exists("computer_vision.py"):
            if not self.process_manager.start_script("screen_scanner", "computer_vision.py"):
                logger.warning("Screen Scanner –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        
        if success:
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.start_monitoring()
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        return success
    
    def stop_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        self.stop_event.set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5.0)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name in list(self.process_manager.processes.keys()):
            self.process_manager.stop_script(name)
        
        self.is_running = False
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_running:
            return
        
        self.is_running = True
        self.stop_event.clear()
        
        self.monitor_thread = threading.Thread(target=self._monitor_worker, daemon=True)
        self.monitor_thread.start()
        
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    def _monitor_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        last_health_check = 0
        
        while not self.stop_event.is_set():
            try:
                # –û—á–∏—â–∞–µ–º –º–µ—Ä—Ç–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                self.process_manager.cleanup_dead_processes()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                current_time = time.time()
                if current_time - last_health_check > self.health_check_interval:
                    health = self.health_checker.run_all_checks()
                    if not health["overall"]:
                        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                        logger.warning(f"Health: {health}")
                    
                    last_health_check = current_time
                
                # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                if self.auto_restart:
                    self._check_and_restart_processes()
                
                time.sleep(self.monitor_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(5)
    
    def _check_and_restart_processes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        critical_processes = ["ghost_assistant"]
        
        for name in critical_processes:
            status = self.process_manager.get_process_status(name)
            if status and status["status"] == "stopped":
                logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ
                if name in self.process_manager.processes:
                    self.process_manager.stop_script(name)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                script_path = self.process_manager.scripts.get(name)
                if script_path:
                    self.process_manager.start_script(name, script_path)
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        health = self.health_checker.run_all_checks()
        processes = self.process_manager.get_all_status()
        
        return {
            "is_running": self.is_running,
            "health": health,
            "processes": processes,
            "timestamp": datetime.now().isoformat()
        }
    
    def restart_process(self, name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞: {name}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        self.process_manager.stop_script(name)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        script_path = self.process_manager.scripts.get(name)
        if script_path:
            return self.process_manager.start_script(name, script_path)
        
        return False


# =============== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===============

def test_orchestrator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Orchestrator"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Orchestrator...")
    
    orchestrator = Orchestrator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    health = orchestrator.health_checker.run_all_checks()
    print(f"Health check: {health}")
    
    if health["overall"]:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        if orchestrator.start_system():
            print("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = orchestrator.get_system_status()
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            
            # –ñ–¥–µ–º
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            orchestrator.stop_system()
            print("üõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞")


if __name__ == "__main__":
    test_orchestrator()
