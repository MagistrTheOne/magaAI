# -*- coding: utf-8 -*-
"""
Yandex Translate –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

import os
import asyncio
import logging
from typing import Dict, List, Optional, Any
import time

try:
    from yandex_cloud_ml_sdk import YCloudML
    YANDEX_SDK_AVAILABLE = True
except ImportError:
    print("Warning: yandex-cloud-ml-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    YANDEX_SDK_AVAILABLE = False


class YandexTranslate:
    """
    Yandex Translate –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    """
    
    def __init__(self):
        self.logger = logging.getLogger("YandexTranslate")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.api_key = os.getenv('YANDEX_API_KEY')
        self.folder_id = os.getenv('YANDEX_FOLDER_ID')
        self.enabled = os.getenv('YANDEX_TRANSLATE_ENABLED', 'true').lower() == 'true'
        
        # –ö–ª–∏–µ–Ω—Ç
        self.client = None
        self.is_authenticated = False
        
        # –ö—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translation_cache = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_client()
    
    def _init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not YANDEX_SDK_AVAILABLE:
                self.logger.warning("Yandex SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            if not self.api_key:
                self.logger.warning("YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            if not self.enabled:
                self.logger.info("Yandex Translate –æ—Ç–∫–ª—é—á–µ–Ω")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            self.client = YCloudML(api_key=self.api_key)
            self.is_authenticated = True
            
            self.logger.info("Yandex Translate –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex Translate: {e}")
            self.is_authenticated = False
    
    async def translate(self, text: str, target_lang: str = "ru", source_lang: str = "auto") -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if not self.enabled or not self.is_authenticated:
                return text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{text}_{source_lang}_{target_lang}"
            if cache_key in self.translation_cache:
                return self.translation_cache[cache_key]
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞
            translate_params = {
                "texts": [text],
                "targetLanguageCode": target_lang,
                "sourceLanguageCode": source_lang,
                "folderId": self.folder_id
            }
            
            # –í—ã–∑–æ–≤ API –ø–µ—Ä–µ–≤–æ–¥–∞
            response = self.client.translate.translate(**translate_params)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if response.translations and len(response.translations) > 0:
                translated_text = response.translations[0].text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.translation_cache[cache_key] = translated_text
                
                return translated_text
            else:
                return text
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text
    
    async def translate_batch(self, texts: List[str], target_lang: str = "ru", source_lang: str = "auto") -> List[str]:
        """–ü–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"""
        try:
            if not self.enabled or not self.is_authenticated:
                return texts
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞
            translate_params = {
                "texts": texts,
                "targetLanguageCode": target_lang,
                "sourceLanguageCode": source_lang,
                "folderId": self.folder_id
            }
            
            # –í—ã–∑–æ–≤ API –ø–µ—Ä–µ–≤–æ–¥–∞
            response = self.client.translate.translate(**translate_params)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if response.translations:
                return [translation.text for translation in response.translations]
            else:
                return texts
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return texts
    
    async def detect_language(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if not self.enabled or not self.is_authenticated:
                return "auto"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
            detect_params = {
                "text": text,
                "folderId": self.folder_id
            }
            
            # –í—ã–∑–æ–≤ API –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
            response = self.client.translate.detect_language(**detect_params)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if response.languageCode:
                return response.languageCode
            else:
                return "auto"
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            return "auto"
    
    def get_supported_languages(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
        return [
            "ru", "en", "es", "fr", "de", "it", "pt", "zh", "ja", "ko",
            "ar", "hi", "tr", "pl", "nl", "sv", "da", "no", "fi", "cs",
            "hu", "ro", "bg", "hr", "sk", "sl", "et", "lv", "lt", "uk"
        ]
    
    def get_language_name(self, lang_code: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞"""
        lang_names = {
            "ru": "–†—É—Å—Å–∫–∏–π",
            "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
            "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
            "de": "–ù–µ–º–µ—Ü–∫–∏–π",
            "it": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
            "pt": "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
            "zh": "–ö–∏—Ç–∞–π—Å–∫–∏–π",
            "ja": "–Ø–ø–æ–Ω—Å–∫–∏–π",
            "ko": "–ö–æ—Ä–µ–π—Å–∫–∏–π",
            "ar": "–ê—Ä–∞–±—Å–∫–∏–π",
            "hi": "–•–∏–Ω–¥–∏",
            "tr": "–¢—É—Ä–µ—Ü–∫–∏–π",
            "pl": "–ü–æ–ª—å—Å–∫–∏–π",
            "nl": "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π",
            "sv": "–®–≤–µ–¥—Å–∫–∏–π",
            "da": "–î–∞—Ç—Å–∫–∏–π",
            "no": "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π",
            "fi": "–§–∏–Ω—Å–∫–∏–π",
            "cs": "–ß–µ—à—Å–∫–∏–π",
            "hu": "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π",
            "ro": "–†—É–º—ã–Ω—Å–∫–∏–π",
            "bg": "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π",
            "hr": "–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π",
            "sk": "–°–ª–æ–≤–∞—Ü–∫–∏–π",
            "sl": "–°–ª–æ–≤–µ–Ω—Å–∫–∏–π",
            "et": "–≠—Å—Ç–æ–Ω—Å–∫–∏–π",
            "lv": "–õ–∞—Ç—ã—à—Å–∫–∏–π",
            "lt": "–õ–∏—Ç–æ–≤—Å–∫–∏–π",
            "uk": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π"
        }
        return lang_names.get(lang_code, lang_code)
    
    def get_usage_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            "enabled": self.enabled,
            "authenticated": self.is_authenticated,
            "cache_size": len(self.translation_cache),
            "supported_languages": len(self.get_supported_languages())
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if not self.enabled:
                return {
                    "status": "disabled",
                    "message": "Yandex Translate –æ—Ç–∫–ª—é—á–µ–Ω"
                }
            
            if not self.is_authenticated:
                return {
                    "status": "error",
                    "message": "–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
                }
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
            test_text = "Hello world"
            translated = await self.translate(test_text, "ru")
            
            return {
                "status": "healthy",
                "message": "Yandex Translate —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "test_translation": f"{test_text} -> {translated}"
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞: {str(e)}"
            }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_yandex_translate():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Translate"""
    translator = YandexTranslate()
    
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Translate...")
    print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if translator.enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –î–∞' if translator.is_authenticated else '‚ùå –ù–µ—Ç'}")
    
    if translator.enabled and translator.is_authenticated:
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        test_text = "Hello, how are you?"
        translated = await translator.translate(test_text, "ru")
        print(f"–ü–µ—Ä–µ–≤–æ–¥: {test_text} -> {translated}")
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        detected = await translator.detect_language("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {detected}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = translator.get_usage_stats()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")


if __name__ == "__main__":
    asyncio.run(test_yandex_translate())
