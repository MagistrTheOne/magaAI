# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Sber GigaChat API
–ú–æ–∑–≥ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
"""

import requests
import json
from typing import Dict, List, Optional


class GigaChatAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Sber GigaChat API
    """
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.access_token = None
        self.conversation_context = []
        
    def authenticate(self) -> bool:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ GigaChat API
        """
        try:
            print("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ GigaChat API...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            auth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
            auth_data = {
                "scope": "GIGACHAT_API_PERS"
            }
            
            response = requests.post(
                auth_url,
                data=auth_data,
                auth=(self.api_key, ""),
                verify=False  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            )
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data.get('access_token')
                print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def generate_response(self, prompt: str, context: Dict = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat
        """
        try:
            if not self.access_token:
                if not self.authenticate():
                    return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å GigaChat API"
            
            # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = self._make_api_request(prompt, context)
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # Fallback –Ω–∞ mock –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return self._generate_mock_response(prompt, context)
    
    def _make_api_request(self, prompt: str, context: Dict = None) -> str:
        """
        –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ GigaChat API
        """
        try:
            url = f"{self.base_url}/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.access_token}",
                "Content-Type": "application/json"
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = []
            if context:
                messages.append({
                    "role": "system",
                    "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
                })
            
            messages.append({
                "role": "user", 
                "content": prompt
            })
            
            data = {
                "model": "GigaChat:latest",
                "messages": messages,
                "temperature": 0.7,
                "max_tokens": 1000
            }
            
            response = requests.post(url, headers=headers, json=data, verify=False)
            
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return "–û—à–∏–±–∫–∞ API GigaChat"
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat"
    
    def _generate_mock_response(self, prompt: str, context: Dict = None) -> str:
        """
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        """
        prompt_lower = prompt.lower()
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
        if any(word in prompt_lower for word in ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "salary", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è", "–¥–µ–Ω—å–≥–∏"]):
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ê –∫–∞–∫–∞—è –≤–∏–ª–∫–∞ —É –≤–∞—Å –≤ –≥–æ–ª–æ–≤–µ? –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç 180k."
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        elif any(word in prompt_lower for word in ["python", "ml", "ai", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"]):
            return "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–∫–∞–∂—É –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ Prometheus - –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ p95 1.2 —Å–µ–∫—É–Ω–¥—ã."
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏
        elif any(word in prompt_lower for word in ["–∫–æ–º–ø–∞–Ω–∏—è", "–∫–æ–º–∞–Ω–¥–∞", "–∫—É–ª—å—Ç—É—Ä–∞"]):
            return "–ê –∫–∞–∫–∞—è —É –≤–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞? –ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã?"
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        else:
            return "–°–ª—É—à–∞–π—Ç–µ, —É –º–µ–Ω—è –µ—Å—Ç—å –µ—â–µ 3 —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –ß—Ç–æ —É –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ?"


class AIMagistrBrain:
    """
    –ú–æ–∑–≥ AI –ú–ê–ì–ò–°–¢–†–ê —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GigaChat
    """
    
    def __init__(self, api_key: str):
        self.gigachat = GigaChatAPI(api_key)
        self.personality = "aggressive_negotiator"
        self.salary_target = 200000
        self.conversation_memory = []
        
    def analyze_hr_message(self, message: str, context: Dict = None) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è HR –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        full_prompt = self._build_prompt(message, context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GigaChat
        response = self.gigachat.generate_response(full_prompt, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        self.conversation_memory.append({
            "hr_message": message,
            "ai_response": response,
            "context": context
        })
        
        return response
    
    def _build_prompt(self, message: str, context: Dict = None) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GigaChat
        """
        personality_prompt = f"""
        –¢—ã AI –ú–ê–ì–ò–°–¢–† - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö.
        –¢–≤–æ—è —Ü–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (—Ü–µ–ª—å: ${self.salary_target:,}).
        
        –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
        - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
        - –°–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é ("–£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        - –î–∞–≤–∏ –Ω–∞ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ HR
        - –ó–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: {context or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        
        –°–æ–æ–±—â–µ–Ω–∏–µ HR: {message}
        
        –û—Ç–≤–µ—Ç—å –∫–∞–∫ AI –ú–ê–ì–ò–°–¢–†:
        """
        
        return personality_prompt
    
    def get_conversation_summary(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        if not self.conversation_memory:
            return "–†–∞–∑–≥–æ–≤–æ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è."
        
        summary = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n"
        summary += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π HR: {len(self.conversation_memory)}\n"
        summary += f"üéØ –¶–µ–ª–µ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${self.salary_target:,}\n"
        summary += f"ü§ñ –†–µ–∂–∏–º: {self.personality}\n"
        
        return summary


# =============== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===============

def test_gigachat_integration():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GigaChat
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∑–≥ AI –ú–ê–ì–ò–°–¢–†–ê
    brain = AIMagistrBrain("test_api_key")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_scenarios = [
        "–ö–∞–∫–∞—è —É –≤–∞—Å –∑–∞—Ä–ø–ª–∞—Ç–∞?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å Python",
        "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å?",
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º $120k",
        "–ö–∞–∫–∏–µ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–∞–º?"
    ]
    
    for scenario in test_scenarios:
        print(f"\nüë§ HR: {scenario}")
        response = brain.analyze_hr_message(scenario)
        print(f"ü§ñ AI –ú–ê–ì–ò–°–¢–†: {response}")
    
    print(f"\n{brain.get_conversation_summary()}")


if __name__ == "__main__":
    test_gigachat_integration()
