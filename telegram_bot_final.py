# -*- coding: utf-8 -*-
"""
AIMagistr 3.1 - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railway
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import asyncio
import logging
import os
import json
import time
import signal
import sys
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pathlib import Path

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_email = State()
    waiting_for_receipt = State()


class AIMagistrTelegramBot:
    """
    AIMagistr 3.1 - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
    """
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger("AIMagistr")
        self.logger.setLevel(logging.INFO)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.bot = Bot(
            token=self.bot_token,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        )
        
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å FSM
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_contexts = {}
        self.user_roles = {}
        self.anti_spam = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "start_time": datetime.now(),
            "messages_processed": 0,
            "errors": 0,
            "users": set()
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._register_handlers()
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            sys.exit(0)
        
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self._handle_start, CommandStart())
        self.dp.message.register(self._handle_help, Command("help"))
        self.dp.message.register(self._handle_features, Command("features"))
        self.dp.message.register(self._handle_reset, Command("reset"))
        self.dp.message.register(self._handle_metrics, Command("metrics"))
        self.dp.message.register(self._handle_status, Command("status"))
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã AIMagistr 3.1
        self.dp.message.register(self._handle_mailtriage, Command("mailtriage"))
        self.dp.message.register(self._handle_timeblock, Command("timeblock"))
        self.dp.message.register(self._handle_receipt, Command("receipt"))
        self.dp.message.register(self._handle_routine, Command("routine"))
        self.dp.message.register(self._handle_subscribe, Command("subscribe"))
        self.dp.message.register(self._handle_trip, Command("trip"))
        self.dp.message.register(self._handle_catalog, Command("catalog"))
        self.dp.message.register(self._handle_focus, Command("focus"))
        self.dp.message.register(self._handle_read, Command("read"))
        self.dp.message.register(self._handle_crm, Command("crm"))
        self.dp.message.register(self._handle_health, Command("health"))
        self.dp.message.register(self._handle_jobs, Command("jobs"))
        self.dp.message.register(self._handle_weekly, Command("weekly"))
        self.dp.message.register(self._handle_shop, Command("shop"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self._handle_text_message, F.text)
        self.dp.message.register(self._handle_photo, F.photo)
        self.dp.message.register(self._handle_document, F.document)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self._handle_callback)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.dp.errors.register(self._handle_errors)
    
    async def _handle_errors(self, event, exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.stats["errors"] += 1
        self.logger.error(f"–û—à–∏–±–∫–∞: {exception}")
        
        if isinstance(exception, TelegramNetworkError):
            self.logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
        elif isinstance(exception, TelegramBadRequest):
            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {exception}")
        else:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}")
    
    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["users"].add(user_id)
            self.stats["messages_processed"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
            if not self._check_anti_spam(user_id):
                await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            welcome_text = f"""
<b>ü§ñ AIMagistr 3.1 - –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–∞–≥–∞</b>

–ü—Ä–∏–≤–µ—Ç, {username}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω—ã.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/help - –°–ø—Ä–∞–≤–∫–∞
/features - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
/metrics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>–ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã 3.1:</b>
/mailtriage - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º
/timeblock - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
/receipt - –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
                [InlineKeyboardButton(text="‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="features")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="metrics")]
            ])
            
            await message.answer(welcome_text, reply_markup=keyboard)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_start: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """
<b>ü§ñ AIMagistr 3.1 - –°–ø—Ä–∞–≤–∫–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/features - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
/metrics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>–ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã 3.1:</b>
/mailtriage - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º
/timeblock - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
/receipt - –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤
/routine - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä—É—Ç–∏–Ω
/subscribe - –¢—Ä–µ–∫–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫
/trip - –ü–æ–º–æ—â–Ω–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
/catalog - –ê–≤—Ç–æ–∫–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
/focus - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–æ–∫—É—Å
/read - –û—á–µ—Ä–µ–¥—å —á—Ç–µ–Ω–∏—è
/crm - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π CRM
/health - –ó–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
/jobs - –î–∂–æ–±-–∞–ª–µ—Ä—Ç—ã
/weekly - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
/shop - –°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–∞–º–º–∞—Ä–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ –¢–µ–∫—Å—Ç - –¥–∏–∞–ª–æ–≥ —Å –ò–ò
‚Ä¢ –§–æ—Ç–æ - –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ PDF/DOCX - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            """
            
            await message.answer(help_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_help: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_features(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /features"""
        try:
            features_text = """
<b>üöÄ AIMagistr 3.1 - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>

<b>üß† AI –∏ –í–∏–¥–µ–Ω–∏–µ:</b>
‚Ä¢ Yandex AI Studio - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ Yandex Vision - –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ Yandex OCR - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ Yandex Translate - –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ RAG —Å–∏—Å—Ç–µ–º–∞ - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º

<b>üìß Email Triage:</b>
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ EML –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (high/medium/low/spam)
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON/CSV

<b>‚è∞ Time Blocking:</b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ iCal
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏

<b>üßæ Finance Receipts:</b>
‚Ä¢ OCR –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º/–¥–∞—Ç
‚Ä¢ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–∫–∞–Ω–µ—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ PII
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ Health check –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            """
            
            await message.answer(features_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_features: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_reset(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
        try:
            user_id = message.from_user.id
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if user_id in self.user_contexts:
                del self.user_contexts[user_id]
            
            await message.answer("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_reset: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_metrics(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /metrics"""
        try:
            uptime = datetime.now() - self.stats["start_time"]
            metrics_text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AIMagistr 3.1</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {len(self.stats['users'])}
<b>–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {self.stats['messages_processed']}
<b>–û—à–∏–±–æ–∫:</b> {self.stats['errors']}
<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime}

<b>–°–µ—Ä–≤–∏—Å—ã:</b>
‚Ä¢ Email Triage: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Time Blocking: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Finance Receipts: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            """
            
            await message.answer(metrics_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_metrics: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_status(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            status_text = f"""
<b>üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

<b>–í–µ—Ä—Å–∏—è:</b> 3.1.0-final
<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –†–∞–±–æ—Ç–∞–µ—Ç
<b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {self.stats['start_time'].strftime('%H:%M:%S')}
<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(self.stats['users'])}

<b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>
‚Ä¢ Telegram Bot: ‚úÖ
‚Ä¢ Health Check: ‚úÖ
‚Ä¢ Anti-spam: ‚úÖ
‚Ä¢ FSM: ‚úÖ

<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫: {self.stats['messages_processed'] / max(1, (datetime.now() - self.stats['start_time']).total_seconds()):.2f}
‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors']}
            """
            
            await message.answer(status_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_status: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ AIMagistr 3.1
    async def _handle_mailtriage(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mailtriage"""
        try:
            await message.answer("üìß <b>Email Triage</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏.\n\n–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high/medium/low/spam)\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º")
            await self.dp.set_state(message.from_user.id, UserStates.waiting_for_email)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_mailtriage: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_timeblock(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /timeblock"""
        try:
            await message.answer("‚è∞ <b>Time Blocking</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á\n‚Ä¢ AI –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ iCal\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_timeblock: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_receipt(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /receipt"""
        try:
            await message.answer("üßæ <b>Finance Receipts</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç —á–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n–Ø –∏–∑–≤–ª–µ–∫—É:\n‚Ä¢ –°—É–º–º—É –ø–æ–∫—É–ø–∫–∏\n‚Ä¢ –î–∞—Ç—É\n‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            await self.dp.set_state(message.from_user.id, UserStates.waiting_for_receipt)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_receipt: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_routine(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /routine"""
        try:
            await message.answer("üîÑ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä—É—Ç–∏–Ω</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á\n‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_routine: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_subscribe(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        try:
            await message.answer("üìã <b>–¢—Ä–µ–∫–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_subscribe: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_trip(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trip"""
        try:
            await message.answer("‚úàÔ∏è <b>–ü–æ–º–æ—â–Ω–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –±–∏–ª–µ—Ç–æ–≤ –∏ –æ—Ç–µ–ª–µ–π\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–π—Å–∞—Ö\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_trip: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_catalog(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        try:
            await message.answer("üìÅ <b>–ê–≤—Ç–æ–∫–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞\n‚Ä¢ –¢–µ–≥–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_catalog: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_focus(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /focus"""
        try:
            await message.answer("üéØ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–æ–∫—É—Å</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–Ω—è\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_focus: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_read(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /read"""
        try:
            await message.answer("üìö <b>–û—á–µ—Ä–µ–¥—å —á—Ç–µ–Ω–∏—è</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –°–∞–º–º–∞—Ä–∏ —Å—Ç–∞—Ç–µ–π\n‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤\n‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_read: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_crm(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /crm"""
        try:
            await message.answer("üë• <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π CRM</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n‚Ä¢ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n‚Ä¢ Follow-up –∑–∞–¥–∞—á–∏\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_crm: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_health(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /health"""
        try:
            await message.answer("üí™ <b>–ó–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –ü–æ–º–æ–¥–æ—Ä–æ —Ç–∞–π–º–µ—Ä\n‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö\n‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–∏–≤—ã—á–µ–∫\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_health: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_jobs(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /jobs"""
        try:
            await message.answer("üíº <b>–î–∂–æ–±-–∞–ª–µ—Ä—Ç—ã</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_jobs: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_weekly(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weekly"""
        try:
            await message.answer("üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_weekly: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_shop(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /shop"""
        try:
            await message.answer("üõí <b>–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∏–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_shop: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_text_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id
            text = message.text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["messages_processed"] += 1
            self.stats["users"].add(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
            if not self._check_anti_spam(user_id):
                await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = await state.get_state()
            
            if current_state == UserStates.waiting_for_email:
                await self._process_email_triage(message, text)
                await state.clear()
            elif current_state == UserStates.waiting_for_receipt:
                await self._process_receipt(message, text)
                await state.clear()
            else:
                await self._process_ai_request(message, text)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_text_message: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_photo(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            await message.answer("üì∑ <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n–í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/mailtriage - –¥–ª—è –ø–∏—Å–µ–º\n/receipt - –¥–ª—è —á–µ–∫–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_photo: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_document(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            await message.answer("üìÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n–í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/mailtriage - –¥–ª—è –ø–∏—Å–µ–º\n/receipt - –¥–ª—è —á–µ–∫–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_document: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback.data
            
            if data == "help":
                await callback.message.answer("üìã <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
            elif data == "features":
                await callback.message.answer("‚ö° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /features –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.")
            elif data == "metrics":
                await callback.message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /metrics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            
            await callback.answer()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _process_email_triage(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞"""
        try:
            await message.answer("üìß <b>–ê–Ω–∞–ª–∏–∑ –ø–∏—Å—å–º–∞</b>\n\n–í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n<b>–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:</b>\n" + text[:500] + "\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å\n‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _process_email_triage: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _process_receipt(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞"""
        try:
            await message.answer("üßæ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞</b>\n\n–í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n<b>–¢–µ–∫—Å—Ç —á–µ–∫–∞:</b>\n" + text[:500] + "\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Å—É–º–º—É\n‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–∞—Ç—É\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _process_receipt: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _process_ai_request(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            await message.answer("ü§ñ <b>AI –ê–Ω–∞–ª–∏–∑</b>\n\n–í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n<b>–í–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n" + text + "\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ /help")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _process_ai_request: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _check_anti_spam(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
        try:
            now = time.time()
            
            if user_id not in self.anti_spam:
                self.anti_spam[user_id] = []
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 60 —Å–µ–∫—É–Ω–¥)
            self.anti_spam[user_id] = [req_time for req_time in self.anti_spam[user_id] if now - req_time < 60]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
            if len(self.anti_spam[user_id]) >= 5:
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self.anti_spam[user_id].append(now)
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _check_anti_spam: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ AIMagistr 3.1 Final Telegram Bot...")
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = AIMagistrTelegramBot()
        await bot.run()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
