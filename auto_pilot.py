# -*- coding: utf-8 -*-
"""
Auto-Pilot - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞
State Machine: Discover ‚Üí Apply ‚Üí Interview ‚Üí Negotiate ‚Üí Close
"""

import asyncio
import json
import time
import threading
import logging
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum

from browser_rpa import BrowserRPA, JobPosting, ApplicationData
from success_prediction import SuccessPredictionEngine, PredictionFeatures
from job_apis import JobAPIManager, JobSearchParams


class AutoPilotState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Auto-Pilot"""
    IDLE = "idle"
    DISCOVER = "discover"  # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    FILTER = "filter"  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑
    APPLY = "apply"  # –ü–æ–¥–∞—á–∞ —Ä–µ–∑—é–º–µ
    FOLLOW_UP = "follow_up"  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–æ–≤
    INTERVIEW = "interview"  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
    NEGOTIATE = "negotiate"  # –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
    CLOSE = "close"  # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    PAUSED = "paused"
    ERROR = "error"


@dataclass
class AutoPilotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto-Pilot"""
    target_role: str = "Senior Python Developer"
    target_companies: List[str] = field(default_factory=lambda: ["–Ø–Ω–¥–µ–∫—Å", "–°–±–µ—Ä", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"])
    target_salary: int = 250000
    max_applications_per_day: int = 5
    search_keywords: List[str] = field(default_factory=lambda: ["Python", "AI", "ML", "Backend"])
    locations: List[str] = field(default_factory=lambda: ["–ú–æ—Å–∫–≤–∞", "–£–¥–∞–ª–µ–Ω–Ω–æ"])
    min_prediction_score: float = 0.6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
    auto_negotiate: bool = True
    follow_up_days: int = 7


@dataclass
class ApplicationRecord:
    """–ó–∞–ø–∏—Å—å –æ–± –æ—Ç–∫–ª–∏–∫–µ"""
    job: JobPosting
    applied_date: datetime
    status: str  # "applied", "viewed", "interview", "rejected", "offer"
    prediction_score: float
    notes: str = ""
    follow_up_date: Optional[datetime] = None
    interview_date: Optional[datetime] = None
    offer_amount: Optional[float] = None


class AutoPilot:
    """
    Auto-Pilot –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    """

    def __init__(self,
                 config: AutoPilotConfig = None,
                 browser_rpa: BrowserRPA = None,
                 success_prediction: SuccessPredictionEngine = None,
                 brain_manager = None):
        """
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto-Pilot
            browser_rpa: Browser RPA –¥–ª—è –≤–µ–±-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            success_prediction: –î–≤–∏–∂–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —É—Å–ø–µ—Ö–∞
            brain_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∑–≥–∞ –¥–ª—è AI
        """
        self.config = config or AutoPilotConfig()
        self.browser_rpa = browser_rpa
        self.success_prediction = success_prediction
        self.brain_manager = brain_manager

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state: AutoPilotState = AutoPilotState.IDLE
        self.is_running: bool = False
        self.state_start_time: Optional[datetime] = None

        # –î–∞–Ω–Ω—ã–µ
        self.applications: List[ApplicationRecord] = []
        self.discovered_jobs: List[JobPosting] = []
        self.daily_applications: Dict[str, int] = {}  # date -> count

        # Callbacks
        self.on_state_change: Optional[Callable] = None
        self.on_application: Optional[Callable] = None
        self.on_interview: Optional[Callable] = None
        self.on_offer: Optional[Callable] = None

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger("AutoPilot")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_applications': 0,
            'interviews_scheduled': 0,
            'offers_received': 0,
            'success_rate': 0.0,
            'avg_response_time': 0.0
        }

    def start(self):
        """–ó–∞–ø—É—Å–∫ Auto-Pilot"""
        if self.is_running:
            self.logger.warning("Auto-Pilot already running")
            return

        self.is_running = True
        self.current_state = AutoPilotState.DISCOVER
        self.state_start_time = datetime.now()

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = threading.Thread(target=self._run_autopilot, daemon=True)
        self.thread.start()

        self.logger.info("Auto-Pilot started")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Auto-Pilot"""
        self.is_running = False
        self.current_state = AutoPilotState.IDLE
        self._notify_state_change()

        self.logger.info("Auto-Pilot stopped")

    def pause(self):
        """–ü–∞—É–∑–∞ Auto-Pilot"""
        if self.current_state != AutoPilotState.PAUSED:
            self.previous_state = self.current_state
            self.current_state = AutoPilotState.PAUSED
            self._notify_state_change()

    def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Auto-Pilot"""
        if self.current_state == AutoPilotState.PAUSED:
            self.current_state = self.previous_state
            self._notify_state_change()

    def _run_autopilot(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Auto-Pilot"""
        # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        while self.is_running:
            try:
                if self.current_state == AutoPilotState.DISCOVER:
                    loop.run_until_complete(self._state_discover())
                elif self.current_state == AutoPilotState.FILTER:
                    self._state_filter()
                elif self.current_state == AutoPilotState.APPLY:
                    loop.run_until_complete(self._state_apply())
                elif self.current_state == AutoPilotState.FOLLOW_UP:
                    self._state_follow_up()
                elif self.current_state == AutoPilotState.INTERVIEW:
                    self._state_interview()
                elif self.current_state == AutoPilotState.NEGOTIATE:
                    loop.run_until_complete(self._state_negotiate())
                elif self.current_state == AutoPilotState.CLOSE:
                    self._state_close()
                elif self.current_state == AutoPilotState.PAUSED:
                    time.sleep(1)
                    continue

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
                time.sleep(0.1)

            except Exception as e:
                self.logger.error(f"Auto-Pilot error: {e}")
                self.current_state = AutoPilotState.ERROR
                self._notify_state_change()
                time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

    async def _state_discover(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            self.logger.info("üîç Starting job discovery...")

            # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö
            discovered_jobs = []

            # –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Job APIs –∏ Browser RPA
            for keyword in self.config.search_keywords:
                if self.job_api_manager:
                    try:
                        search_params = JobSearchParams(
                            keyword=keyword,
                            location=self.user_context.get('preferred_location', 'remote'),
                            salary_min=self.user_context.get('salary_expectation', 150000)
                        )
                        real_jobs = await self.job_api_manager.search_jobs(search_params)
                        discovered_jobs.extend(real_jobs)
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API: {e}")
                        # Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ
                        mock_jobs = self._mock_job_search(keyword)
                        discovered_jobs.extend(mock_jobs)
                else:
                    # Fallback –Ω–∞ mock –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    mock_jobs = self._mock_job_search(keyword)
                    discovered_jobs.extend(mock_jobs)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_jobs = self._filter_duplicates(discovered_jobs)

            self.discovered_jobs = unique_jobs
            self.logger.info(f"üìã Found {len(unique_jobs)} unique jobs")

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            self._change_state(AutoPilotState.FILTER)

        except Exception as e:
            self.logger.error(f"Discovery failed: {e}")
            time.sleep(10)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫

    def _state_filter(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            self.logger.info("üéØ Filtering and analyzing jobs...")

            filtered_jobs = []

            for job in self.discovered_jobs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å
                today = datetime.now().strftime("%Y-%m-%d")
                today_count = self.daily_applications.get(today, 0)

                if today_count >= self.config.max_applications_per_day:
                    self.logger.info("üìÖ Daily application limit reached")
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                if job.company not in self.config.target_companies:
                    continue

                # –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞
                if self.success_prediction:
                    features = PredictionFeatures(
                        company_size="large",
                        industry="tech",
                        role_level="senior",
                        interview_round=1,
                        time_spent=5.0,
                        questions_asked=0,
                        technical_score=0.8,
                        communication_score=0.7,
                        cultural_fit=0.8,
                        salary_expectation=self.config.target_salary,
                        market_rate=self.config.target_salary * 0.9,
                        candidate_experience=5,
                        similar_offers_count=len(self.applications)
                    )

                    result = self.success_prediction.predict_success(features)
                    prediction_score = result.offer_probability

                    if prediction_score >= self.config.min_prediction_score:
                        job.prediction_score = prediction_score
                        filtered_jobs.append(job)
                        self.logger.info(f"‚úÖ {job.title} at {job.company} - prediction: {prediction_score:.1%}")
                    else:
                        self.logger.info(f"‚ùå {job.title} at {job.company} - prediction: {prediction_score:.1%}")
                else:
                    # –ë–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
                    filtered_jobs.append(job)

            self.discovered_jobs = filtered_jobs

            if filtered_jobs:
                self._change_state(AutoPilotState.APPLY)
            else:
                self.logger.info("üò¥ No suitable jobs found, waiting...")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
                self._change_state(AutoPilotState.DISCOVER)

        except Exception as e:
            self.logger.error(f"Filter failed: {e}")

    async def _state_apply(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–¥–∞—á–∞ —Ä–µ–∑—é–º–µ"""
        try:
            if not self.discovered_jobs:
                self._change_state(AutoPilotState.DISCOVER)
                return

            job = self.discovered_jobs.pop(0)  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é

            self.logger.info(f"üìù Applying to: {job.title} at {job.company}")

            # –†–µ–∞–ª—å–Ω–∞—è –ø–æ–¥–∞—á–∞ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Browser RPA
            if self.browser_rpa:
                try:
                    application_data = ApplicationData(
                        resume_path=self.config.resume_path,
                        cover_letter=self._generate_cover_letter(job),
                        job_url=job.url
                    )
                    success = await self.browser_rpa.apply_to_job(application_data)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ RPA: {e}")
                    success = False
            else:
                # Fallback –Ω–∞ mock –µ—Å–ª–∏ RPA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                success = self._mock_job_application(job)

            if success:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∫–ª–∏–∫
                application = ApplicationRecord(
                    job=job,
                    applied_date=datetime.now(),
                    status="applied",
                    prediction_score=getattr(job, 'prediction_score', 0.5),
                    follow_up_date=datetime.now() + timedelta(days=self.config.follow_up_days)
                )

                self.applications.append(application)
                self.stats['total_applications'] += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫
                today = datetime.now().strftime("%Y-%m-%d")
                self.daily_applications[today] = self.daily_applications.get(today, 0) + 1

                # Callback
                if self.on_application:
                    self.on_application(application)

                self.logger.info(f"‚úÖ Successfully applied to {job.title}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–∫–ª–∏–∫–æ–º
                time.sleep(5)

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ follow-up
            if not self.discovered_jobs:
                self._change_state(AutoPilotState.FOLLOW_UP)

        except Exception as e:
            self.logger.error(f"Apply failed: {e}")

    def _state_follow_up(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–æ–≤"""
        try:
            self.logger.info("üìû Following up on applications...")

            now = datetime.now()
            follow_ups_needed = []

            for app in self.applications:
                if app.status == "applied" and app.follow_up_date and now >= app.follow_up_date:
                    follow_ups_needed.append(app)

            if follow_ups_needed:
                self.logger.info(f"üìß Need to follow up on {len(follow_ups_needed)} applications")

                for app in follow_ups_needed:
                    self._send_follow_up_email(app)
                    app.follow_up_date = now + timedelta(days=self.config.follow_up_days)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            interviews_scheduled = [app for app in self.applications if app.interview_date and app.interview_date <= now + timedelta(days=1)]

            if interviews_scheduled:
                self._change_state(AutoPilotState.INTERVIEW)
            else:
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º follow-up
                time.sleep(3600)  # 1 —á–∞—Å

        except Exception as e:
            self.logger.error(f"Follow-up failed: {e}")

    def _state_interview(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        try:
            self.logger.info("üé§ Preparing for interviews...")

            now = datetime.now()
            upcoming_interviews = [
                app for app in self.applications
                if app.interview_date and app.interview_date <= now + timedelta(days=1)
            ]

            if upcoming_interviews:
                for interview in upcoming_interviews:
                    self.logger.info(f"üìÖ Interview scheduled: {interview.job.title} at {interview.job.company}")

                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
                    self._prepare_for_interview(interview)

                    # Callback
                    if self.on_interview:
                        self.on_interview(interview)

                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    interview.status = "interviewing"

                self.stats['interviews_scheduled'] += len(upcoming_interviews)

            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ follow-up
            self._change_state(AutoPilotState.FOLLOW_UP)

        except Exception as e:
            self.logger.error(f"Interview preparation failed: {e}")

    async def _state_negotiate(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"""
        try:
            self.logger.info("üíº Starting negotiations...")

            offers_to_negotiate = [
                app for app in self.applications
                if app.status == "offer" and app.offer_amount
            ]

            if offers_to_negotiate:
                for offer in offers_to_negotiate:
                    self.logger.info(f"üí∞ Negotiating offer: ${offer.offer_amount:,.0f} from {offer.job.company}")

                    # –†–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —á–µ—Ä–µ–∑ Quantum Negotiation
                    if self.quantum_negotiation:
                        try:
                            negotiation_details = {
                                'current_offer': offer.offer_amount,
                                'target': self.config.target_salary,
                                'benefits': offer.job.benefits or ['remote work', 'flexible schedule'],
                                'company': offer.job.company,
                                'market_rate': self._get_market_rate(offer.job.title)
                            }

                            negotiation_result = await self.quantum_negotiation.negotiate_quantum(negotiation_details)
                            final_amount = negotiation_result['best_offer']

                            self.logger.info(f"‚öõÔ∏è Quantum negotiated: ${final_amount:,.0f} (+{negotiation_result['growth_percentage']:.1f}%)")

                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ Quantum –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤: {e}")
                            final_amount = self._negotiate_offer(offer)  # Fallback
                    else:
                        final_amount = self._negotiate_offer(offer)  # Fallback

                    if final_amount > offer.offer_amount:
                        offer.offer_amount = final_amount
                        offer.status = "negotiated"
                        self.logger.info(f"‚úÖ Negotiated to: ${final_amount:,.0f}")

            # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫—Ä—ã—Ç–∏—é
            self._change_state(AutoPilotState.CLOSE)

        except Exception as e:
            self.logger.error(f"Negotiation failed: {e}")

    def _state_close(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ: —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            self.logger.info("üéâ Closing deals...")

            successful_offers = [
                app for app in self.applications
                if app.status in ["negotiated", "offer"] and app.offer_amount >= self.config.target_salary
            ]

            if successful_offers:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                best_offer = max(successful_offers, key=lambda x: x.offer_amount)

                self.logger.info(f"üèÜ Best offer: ${best_offer.offer_amount:,.0f} from {best_offer.job.company}")

                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
                best_offer.status = "accepted"

                # Callback
                if self.on_offer:
                    self.on_offer(best_offer)

                self.stats['offers_received'] += 1

                # Auto-Pilot –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!
                self.logger.info("üéä Auto-Pilot mission accomplished!")
                self.stop()

            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                self.logger.info("üîÑ No suitable offers yet, continuing search...")
                self._change_state(AutoPilotState.DISCOVER)

        except Exception as e:
            self.logger.error(f"Close failed: {e}")

    def _change_state(self, new_state: AutoPilotState):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.current_state != new_state:
            self.logger.info(f"üîÑ State change: {self.current_state.value} ‚Üí {new_state.value}")
            self.current_state = new_state
            self.state_start_time = datetime.now()
            self._notify_state_change()

    def _notify_state_change(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.on_state_change:
            self.on_state_change(self.current_state, self.state_start_time)

    def _mock_job_search(self, keyword: str) -> List[JobPosting]:
        """–ú–æ–∫–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        companies = ["–Ø–Ω–¥–µ–∫—Å", "–°–±–µ—Ä", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "VK", "Ozon"]
        titles = [
            f"Senior {keyword} Developer",
            f"Lead {keyword} Engineer",
            f"{keyword} Tech Lead",
            f"Principal {keyword} Developer"
        ]

        jobs = []
        for i in range(3):
            job = JobPosting(
                title=titles[i % len(titles)],
                company=companies[i % len(companies)],
                location="–ú–æ—Å–∫–≤–∞",
                salary=f"{200000 + i * 25000} - {250000 + i * 25000} —Ä—É–±.",
                description=f"–í–∞–∫–∞–Ω—Å–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω–æ–≥–æ {keyword} —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
                url=f"https://example.com/job/{i}",
                source="mock",
                posted_date=datetime.now().strftime("%Y-%m-%d")
            )
            jobs.append(job)

        return jobs

    def _mock_job_application(self, job: JobPosting) -> bool:
        """–ú–æ–∫–æ–≤–∞—è –ø–æ–¥–∞—á–∞ —Ä–µ–∑—é–º–µ"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—Ö –≤ 80% —Å–ª—É—á–∞–µ–≤
        import random
        success = random.random() < 0.8

        if success:
            # –ò–Ω–æ–≥–¥–∞ —Å—Ä–∞–∑—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
            if random.random() < 0.3:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
                interview_date = datetime.now() + timedelta(days=7)
                self._schedule_mock_interview(job, interview_date)

        return success

    def _schedule_mock_interview(self, job: JobPosting, interview_date: datetime):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∫–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        # –ù–∞–π–¥–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∫–ª–∏–∫–µ
        for app in self.applications:
            if app.job.url == job.url:
                app.interview_date = interview_date
                app.status = "interview_scheduled"
                break

    def _filter_duplicates(self, jobs: List[JobPosting]) -> List[JobPosting]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π"""
        seen = set()
        unique_jobs = []

        for job in jobs:
            key = (job.title.lower(), job.company.lower())
            if key not in seen:
                seen.add(key)
                unique_jobs.append(job)

        return unique_jobs

    def _send_follow_up_email(self, application: ApplicationRecord):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ follow-up email"""
        self.logger.info(f"üìß Sending follow-up to {application.job.company} for {application.job.title}")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±—ã email API –∏–ª–∏ SMTP

    def _prepare_for_interview(self, application: ApplicationRecord):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        self.logger.info(f"üéì Preparing for interview: {application.job.title} at {application.job.company}")

        # –†–µ–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
        try:
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Brain Manager
            if self.brain_manager and self.brain_manager.is_authenticated:
                company_analysis = self.brain_manager.process_hr_message(
                    f"–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ {application.job.company}. "
                    f"–ö–∞–∫–∏–µ —É –Ω–∏—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∫—É–ª—å—Ç—É—Ä–∞, —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π?",
                    {}
                )
                self.logger.info(f"üìä Company analysis: {company_analysis[:200]}...")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Intent Engine
            if self.intent_engine:
                interview_questions = self.intent_engine.generate_interview_questions(
                    application.job.title,
                    application.job.company
                )
                self.logger.info(f"‚ùì Prepared {len(interview_questions)} interview questions")

            # –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞
            if self.success_prediction:
                prediction = self.success_prediction.predict_success(
                    PredictionFeatures(
                        experience_years=self.user_context.get('experience_years', 3),
                        skill_match=0.8,
                        company_size=application.job.company_size or "medium",
                        industry=application.job.industry or "tech",
                        role_level=application.job.level or "middle",
                        interview_count=len([a for a in self.applications if a.status == "interviewing"]),
                        referral=self.user_context.get('has_referral', False),
                        portfolio_quality=self.user_context.get('portfolio_quality', 0.7)
                    )
                )
                self.logger.info(f"üéØ Success prediction: {prediction.probability:.1%}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            # Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É

    def _negotiate_offer(self, application: ApplicationRecord) -> float:
        """–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –ø–æ –æ—Ñ—Ñ–µ—Ä—É"""
        current_offer = application.offer_amount
        target = self.config.target_salary

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
        if current_offer < target * 0.9:
            # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è
            application.status = "offer_declined"
            return current_offer
        elif current_offer < target:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å
            negotiated = min(current_offer * 1.15, target)
            return negotiated
        else:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º
            return current_offer

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Auto-Pilot"""
        return {
            'is_running': self.is_running,
            'current_state': self.current_state.value,
            'state_start_time': self.state_start_time.isoformat() if self.state_start_time else None,
            'applications_count': len(self.applications),
            'discovered_jobs_count': len(self.discovered_jobs),
            'stats': self.stats
        }

    def get_applications(self) -> List[ApplicationRecord]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤"""
        return self.applications.copy()

    def add_manual_application(self, job: JobPosting, prediction_score: float = 0.5):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞"""
        application = ApplicationRecord(
            job=job,
            applied_date=datetime.now(),
            status="applied",
            prediction_score=prediction_score
        )

        self.applications.append(application)
        self.stats['total_applications'] += 1

    def update_application_status(self, application_id: int, status: str, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞"""
        if 0 <= application_id < len(self.applications):
            app = self.applications[application_id]
            app.status = status

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for key, value in kwargs.items():
                if hasattr(app, key):
                    setattr(app, key, value)

            self.logger.info(f"Updated application {application_id}: {status}")

    def export_data(self, filename: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Auto-Pilot"""
        if not filename:
            timestamp = int(time.time())
            filename = f"autopilot_data_{timestamp}.json"

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        applications_data = []
        for app in self.applications:
            app_dict = {
                'job': {
                    'title': app.job.title,
                    'company': app.job.company,
                    'url': app.job.url,
                    'salary': app.job.salary
                },
                'applied_date': app.applied_date.isoformat(),
                'status': app.status,
                'prediction_score': app.prediction_score,
                'notes': app.notes,
                'follow_up_date': app.follow_up_date.isoformat() if app.follow_up_date else None,
                'interview_date': app.interview_date.isoformat() if app.interview_date else None,
                'offer_amount': app.offer_amount
            }
            applications_data.append(app_dict)

        data = {
            'config': {
                'target_role': self.config.target_role,
                'target_companies': self.config.target_companies,
                'target_salary': self.config.target_salary,
                'max_applications_per_day': self.config.max_applications_per_day
            },
            'current_state': self.current_state.value,
            'is_running': self.is_running,
            'applications': applications_data,
            'stats': self.stats,
            'export_time': datetime.now().isoformat()
        }

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        self.logger.info(f"Data exported to {filename}")
        return filename

    def import_data(self, filename: str):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Auto-Pilot"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            config_data = data.get('config', {})
            self.config = AutoPilotConfig(**config_data)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.current_state = AutoPilotState(data.get('current_state', 'idle'))
            self.is_running = data.get('is_running', False)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏
            applications_data = data.get('applications', [])
            for app_data in applications_data:
                job_data = app_data['job']
                job = JobPosting(**job_data)

                application = ApplicationRecord(
                    job=job,
                    applied_date=datetime.fromisoformat(app_data['applied_date']),
                    status=app_data['status'],
                    prediction_score=app_data['prediction_score'],
                    notes=app_data.get('notes', ''),
                    follow_up_date=datetime.fromisoformat(app_data['follow_up_date']) if app_data.get('follow_up_date') else None,
                    interview_date=datetime.fromisoformat(app_data['interview_date']) if app_data.get('interview_date') else None,
                    offer_amount=app_data.get('offer_amount')
                )

                self.applications.append(application)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats.update(data.get('stats', {}))

            self.logger.info(f"Data imported from {filename}")

        except Exception as e:
            self.logger.error(f"Import failed: {e}")
