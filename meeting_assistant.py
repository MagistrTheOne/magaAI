# -*- coding: utf-8 -*-
"""
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á - –¥–æ, –≤–æ –≤—Ä–µ–º—è –∏ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á
"""

import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
import logging
import threading
import time

try:
    from faster_whisper import WhisperModel
    from mail_calendar import MailCalendar
    from memory_palace import MemoryPalace
    from brain.gigachat_sdk import BrainManager
    COMPONENTS_AVAILABLE = True
except ImportError as e:
    print(f"Warning: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    COMPONENTS_AVAILABLE = False


@dataclass
class MeetingContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏"""
    title: str
    participants: List[str]
    company: str
    date: str
    time: str
    duration: int  # –º–∏–Ω—É—Ç—ã
    agenda: List[str]
    previous_emails: List[Dict]
    company_info: Dict[str, Any]
    participant_profiles: Dict[str, Dict]


@dataclass
class MeetingNote:
    """–ó–∞–º–µ—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–∏"""
    timestamp: str
    speaker: str
    content: str
    action_item: bool = False
    important: bool = False


@dataclass
class MeetingSummary:
    """–°–≤–æ–¥–∫–∞ –≤—Å—Ç—Ä–µ—á–∏"""
    key_points: List[str]
    action_items: List[str]
    decisions: List[str]
    next_steps: List[str]
    participants_summary: Dict[str, str]


class MeetingAssistant:
    """
    –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    
    def __init__(self):
        self.logger = logging.getLogger("MeetingAssistant")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.mail_calendar = None
        self.memory_palace = None
        self.brain_manager = None
        self.whisper_model = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_meeting = None
        self.is_recording = False
        self.notes = []
        self.recording_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = {
            'auto_record': True,
            'auto_transcribe': True,
            'save_audio': True,
            'language': 'ru'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_components()
    
    def _init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            if not COMPONENTS_AVAILABLE:
                self.logger.warning("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            
            # Mail Calendar
            self.mail_calendar = MailCalendar()
            
            # Memory Palace
            self.memory_palace = MemoryPalace()
            
            # Brain Manager
            self.brain_manager = BrainManager()
            
            # Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            self.whisper_model = WhisperModel("base", device="cpu")
            
            self.logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Meeting Assistant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    async def prepare_meeting(self, meeting_id: str) -> MeetingContext:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ"""
        self.logger.info(f"üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ {meeting_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
            meeting_data = await self._get_meeting_data(meeting_id)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            participants = meeting_data.get('participants', [])
            company = meeting_data.get('company', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∏—Å—å–º–∞
            previous_emails = await self._get_previous_emails(participants, company)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
            company_info = await self._get_company_info(company)
            
            # –ü—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participant_profiles = await self._get_participant_profiles(participants)
            
            context = MeetingContext(
                title=meeting_data.get('title', '–í—Å—Ç—Ä–µ—á–∞'),
                participants=participants,
                company=company,
                date=meeting_data.get('date', ''),
                time=meeting_data.get('time', ''),
                duration=meeting_data.get('duration', 60),
                agenda=meeting_data.get('agenda', []),
                previous_emails=previous_emails,
                company_info=company_info,
                participant_profiles=participant_profiles
            )
            
            self.current_meeting = context
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            if self.memory_palace:
                await self.memory_palace.add_memory(
                    content=f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ: {context.title}",
                    metadata={
                        'type': 'meeting_prep',
                        'meeting_id': meeting_id,
                        'company': company,
                        'participants': participants
                    }
                )
            
            return context
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤—Å—Ç—Ä–µ—á–µ: {e}")
            return None
    
    async def start_meeting(self):
        """–ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏"""
        if not self.current_meeting:
            self.logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏")
            return
        
        self.logger.info("üé§ –ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
        if self.config['auto_record']:
            await self.start_recording()
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É
        note = MeetingNote(
            timestamp=datetime.now().isoformat(),
            speaker="System",
            content="–í—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–∞–ª–∞—Å—å",
            important=True
        )
        self.notes.append(note)
    
    async def start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            return
        
        self.is_recording = True
        self.logger.info("üî¥ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.recording_thread = threading.Thread(target=self._recording_loop)
        self.recording_thread.daemon = True
        self.recording_thread.start()
    
    def _recording_loop(self):
        """–¶–∏–∫–ª –∑–∞–ø–∏—Å–∏"""
        while self.is_recording:
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
                # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                time.sleep(1)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
    
    async def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if not self.is_recording:
            return
        
        self.is_recording = False
        self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏")
        
        if self.recording_thread:
            self.recording_thread.join()
    
    async def add_note(self, content: str, speaker: str = "User", important: bool = False):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
        note = MeetingNote(
            timestamp=datetime.now().isoformat(),
            speaker=speaker,
            content=content,
            important=important
        )
        self.notes.append(note)
        
        self.logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {content[:50]}...")
    
    async def transcribe_audio(self, audio_file: str) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ"""
        try:
            if not self.whisper_model:
                return "Whisper –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            segments, info = self.whisper_model.transcribe(audio_file, language=self.config['language'])
            text = " ".join([segment.text for segment in segments])
            
            return text
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return ""
    
    async def end_meeting(self) -> MeetingSummary:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"""
        if not self.current_meeting:
            return None
        
        self.logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        await self.stop_recording()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏
        summary = await self._analyze_notes()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        if self.memory_palace:
            await self.memory_palace.add_memory(
                content=f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞: {self.current_meeting.title}",
                metadata={
                    'type': 'meeting_summary',
                    'company': self.current_meeting.company,
                    'participants': self.current_meeting.participants,
                    'key_points': summary.key_points,
                    'action_items': summary.action_items
                }
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_meeting = None
        self.notes = []
        
        return summary
    
    async def _get_meeting_data(self, meeting_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∏"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        return {
            'title': '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
            'participants': ['hr@company.com', 'tech@company.com'],
            'company': 'Tech Company',
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': '14:00',
            'duration': 60,
            'agenda': ['–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π']
        }
    
    async def _get_previous_emails(self, participants: List[str], company: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–∏—Å–µ–º"""
        try:
            if not self.mail_calendar:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            emails = []
            for participant in participants:
                participant_emails = await self.mail_calendar.get_emails_from(participant)
                emails.extend(participant_emails)
            
            return emails[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∏—Å–µ–º
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º: {e}")
            return []
    
    async def _get_company_info(self, company: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            if not self.memory_palace:
                return {}
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø–∞–º—è—Ç–∏
            company_memories = await self.memory_palace.search_memories(f"–∫–æ–º–ø–∞–Ω–∏—è {company}")
            
            return {
                'memories': company_memories,
                'last_interaction': '–ù–µ–¥–∞–≤–Ω–æ',
                'industry': 'IT'
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return {}
    
    async def _get_participant_profiles(self, participants: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        profiles = {}
        
        for participant in participants:
            try:
                if self.memory_palace:
                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
                    participant_memories = await self.memory_palace.search_memories(participant)
                    
                    profiles[participant] = {
                        'memories': participant_memories,
                        'role': '–£—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á–∏',
                        'last_contact': '–ù–µ–¥–∞–≤–Ω–æ'
                    }
                else:
                    profiles[participant] = {
                        'role': '–£—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á–∏',
                        'last_contact': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    }
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {participant}: {e}")
                profiles[participant] = {'role': '–£—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á–∏'}
        
        return profiles
    
    async def _analyze_notes(self) -> MeetingSummary:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–æ–∫ –≤—Å—Ç—Ä–µ—á–∏"""
        if not self.notes:
            return MeetingSummary([], [], [], [], {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        key_points = []
        action_items = []
        decisions = []
        next_steps = []
        
        for note in self.notes:
            if note.important:
                key_points.append(note.content)
            
            if note.action_item:
                action_items.append(note.content)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            if any(word in note.content.lower() for word in ['—Ä–µ—à–∏–ª–∏', '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', '—Å–æ–≥–ª–∞—Å–æ–≤–∞–ª–∏']):
                decisions.append(note.content)
            
            if any(word in note.content.lower() for word in ['—Å–ª–µ–¥—É—é—â–∏–π', '–¥–∞–ª–µ–µ', '–ø–æ—Ç–æ–º']):
                next_steps.append(note.content)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        participants_summary = {}
        for note in self.notes:
            if note.speaker not in participants_summary:
                participants_summary[note.speaker] = []
            participants_summary[note.speaker].append(note.content)
        
        return MeetingSummary(
            key_points=key_points,
            action_items=action_items,
            decisions=decisions,
            next_steps=next_steps,
            participants_summary=participants_summary
        )
    
    def format_meeting_context(self, context: MeetingContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏"""
        text = f"üìÖ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏: {context.title}</b>\n\n"
        text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.company}\n"
        text += f"üìÖ –î–∞—Ç–∞: {context.date} –≤ {context.time}\n"
        text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {context.duration} –º–∏–Ω\n\n"
        
        if context.participants:
            text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
            for participant in context.participants:
                text += f"‚Ä¢ {participant}\n"
            text += "\n"
        
        if context.agenda:
            text += f"üìã <b>–ü–æ–≤–µ—Å—Ç–∫–∞:</b>\n"
            for item in context.agenda:
                text += f"‚Ä¢ {item}\n"
            text += "\n"
        
        if context.previous_emails:
            text += f"üìß <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∏—Å—å–º–∞:</b> {len(context.previous_emails)}\n"
        
        return text
    
    def format_meeting_summary(self, summary: MeetingSummary) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤—Å—Ç—Ä–µ—á–∏"""
        text = f"üìä <b>–°–≤–æ–¥–∫–∞ –≤—Å—Ç—Ä–µ—á–∏</b>\n\n"
        
        if summary.key_points:
            text += f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:</b>\n"
            for point in summary.key_points:
                text += f"‚Ä¢ {point}\n"
            text += "\n"
        
        if summary.action_items:
            text += f"‚úÖ <b>–ó–∞–¥–∞—á–∏:</b>\n"
            for item in summary.action_items:
                text += f"‚Ä¢ {item}\n"
            text += "\n"
        
        if summary.decisions:
            text += f"ü§ù <b>–†–µ—à–µ–Ω–∏—è:</b>\n"
            for decision in summary.decisions:
                text += f"‚Ä¢ {decision}\n"
            text += "\n"
        
        if summary.next_steps:
            text += f"‚û°Ô∏è <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
            for step in summary.next_steps:
                text += f"‚Ä¢ {step}\n"
            text += "\n"
        
        return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_meeting_assistant():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤—Å—Ç—Ä–µ—á"""
    assistant = MeetingAssistant()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ
    context = await assistant.prepare_meeting("test_meeting")
    if context:
        print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏:")
        print(assistant.format_meeting_context(context))
    
    # –ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏
    await assistant.start_meeting()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
    await assistant.add_note("–û–±—Å—É–¥–∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "User", True)
    await assistant.add_note("–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ", "HR", True)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    summary = await assistant.end_meeting()
    if summary:
        print("\n–°–≤–æ–¥–∫–∞ –≤—Å—Ç—Ä–µ—á–∏:")
        print(assistant.format_meeting_summary(summary))


if __name__ == "__main__":
    asyncio.run(test_meeting_assistant())
