# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
AI –ú–ê–ì–ò–°–¢–† - –ú–æ–¥—É–ª—å –∑—Ä–µ–Ω–∏—è
"""

import cv2
import numpy as np
import pytesseract
from PIL import Image
import pyautogui
from typing import Dict, List, Optional, Tuple


class ScreenAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    """
    
    def __init__(self):
        self.ocr_engine = "tesseract"
        self.face_detection = True
        self.slide_analysis = True
        self.face_cascade = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        self._init_detectors()
        
    def _init_detectors(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        """
        try:
            # –î–µ—Ç–µ–∫—Ç–æ—Ä –ª–∏—Ü
            self.face_cascade = cv2.CascadeClassifier(
                cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
            )
            print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –ª–∏—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤: {e}")
    
    def capture_screen(self, region: Tuple[int, int, int, int] = None) -> np.ndarray:
        """
        –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
        """
        try:
            if region:
                screenshot = pyautogui.screenshot(region=region)
            else:
                screenshot = pyautogui.screenshot()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
            screen_array = np.array(screenshot)
            screen_array = cv2.cvtColor(screen_array, cv2.COLOR_RGB2BGR)
            
            return screen_array
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            return None
    
    def extract_text_from_screen(self, screen_image: np.ndarray) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∞ (OCR)
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image
            pil_image = Image.fromarray(cv2.cvtColor(screen_image, cv2.COLOR_BGR2RGB))
            
            # OCR —Å Tesseract
            text = pytesseract.image_to_string(pil_image, lang='rus+eng')
            
            return text.strip()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            return ""
    
    def detect_faces(self, screen_image: np.ndarray) -> List[Tuple[int, int, int, int]]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """
        try:
            if self.face_cascade is None:
                return []
            
            gray = cv2.cvtColor(screen_image, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.1, 4)
            
            return [(x, y, w, h) for (x, y, w, h) in faces]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü: {e}")
            return []
    
    def analyze_meeting_screen(self, screen_image: np.ndarray) -> Dict:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞ –≤—Å—Ç—Ä–µ—á–∏
        """
        analysis = {
            "text_content": "",
            "faces_detected": 0,
            "is_presentation": False,
            "is_document": False,
            "emotions": [],
            "job_keywords": []
        }
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            analysis["text_content"] = self.extract_text_from_screen(screen_image)
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü
            faces = self.detect_faces(screen_image)
            analysis["faces_detected"] = len(faces)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            analysis.update(self._analyze_content_type(screen_image))
            
            # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ —Ä–∞–±–æ—Ç–µ
            analysis["job_keywords"] = self._extract_job_keywords(analysis["text_content"])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
        
        return analysis
    
    def _analyze_content_type(self, screen_image: np.ndarray) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç, etc.)
        """
        analysis = {
            "is_presentation": False,
            "is_document": False
        }
        
        try:
            # –ü–æ–∏—Å–∫ —Å–ª–∞–π–¥–æ–≤/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
            # (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
            gray = cv2.cvtColor(screen_image, cv2.COLOR_BGR2GRAY)
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (—Å–ª–∞–π–¥—ã)
            edges = cv2.Canny(gray, 50, 150)
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
            if len(contours) > 10:
                analysis["is_presentation"] = True
            
            # –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
            text_density = len(self.extract_text_from_screen(screen_image))
            if text_density > 500:  # –ú–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                analysis["is_document"] = True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        
        return analysis
    
    def _extract_job_keywords(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ —Ä–∞–±–æ—Ç–µ
        """
        job_keywords = [
            "–∑–∞—Ä–ø–ª–∞—Ç–∞", "salary", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è", "–¥–µ–Ω—å–≥–∏",
            "python", "java", "javascript", "ml", "ai",
            "—É–¥–∞–ª–µ–Ω–∫–∞", "remote", "–æ—Ñ–∏—Å", "–∫–æ–º–∞–Ω–¥–∞",
            "–ø—Ä–æ–µ–∫—Ç", "–∑–∞–¥–∞—á–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            "–æ–ø—ã—Ç", "—Å—Ç–∞–∂", "–Ω–∞–≤—ã–∫–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        ]
        
        found_keywords = []
        text_lower = text.lower()
        
        for keyword in job_keywords:
            if keyword in text_lower:
                found_keywords.append(keyword)
        
        return found_keywords
    
    def extract_job_info(self, screen_data: Dict) -> Dict:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        """
        job_info = {
            "position": "",
            "salary_range": "",
            "requirements": [],
            "benefits": [],
            "company_info": ""
        }
        
        text = screen_data.get("text_content", "")
        
        # –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏
        position_patterns = [
            r"–ø–æ–∑–∏—Ü–∏—è[:\s]+([^\n]+)",
            r"–¥–æ–ª–∂–Ω–æ—Å—Ç—å[:\s]+([^\n]+)",
            r"position[:\s]+([^\n]+)"
        ]
        
        for pattern in position_patterns:
            import re
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                job_info["position"] = match.group(1).strip()
                break
        
        # –ü–æ–∏—Å–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã
        salary_patterns = [
            r"(\$?\d{1,3}(?:,\d{3})*(?:k|000)?)",
            r"(\d+)\s*(?:k|thousand|—Ç—ã—Å—è—á)"
        ]
        
        for pattern in salary_patterns:
            import re
            matches = re.findall(pattern, text)
            if matches:
                job_info["salary_range"] = ", ".join(matches)
                break
        
        return job_info


class MeetingMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    
    def __init__(self):
        self.analyzer = ScreenAnalyzer()
        self.is_monitoring = False
        self.last_analysis = None
        
    def start_monitoring(self, interval: float = 2.0):
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–∞
        """
        self.is_monitoring = True
        print("üëÅÔ∏è –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        # threading.Thread(target=self._monitor_loop, args=(interval,)).start()
    
    def stop_monitoring(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        self.is_monitoring = False
        print("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_current_analysis(self) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
        """
        if not self.is_monitoring:
            return None
        
        try:
            # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
            screen = self.analyzer.capture_screen()
            if screen is None:
                return None
            
            # –ê–Ω–∞–ª–∏–∑
            analysis = self.analyzer.analyze_meeting_screen(screen)
            self.last_analysis = analysis
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return None


# =============== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===============

def test_computer_vision():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ScreenAnalyzer()
    
    # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    print("üì∏ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞...")
    screen = analyzer.capture_screen()
    
    if screen is not None:
        print("‚úÖ –≠–∫—Ä–∞–Ω –∑–∞—Ö–≤–∞—á–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑
        print("üîç –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–∞...")
        analysis = analyzer.analyze_meeting_screen(screen)
        
        print(f"üìù –¢–µ–∫—Å—Ç: {analysis['text_content'][:100]}...")
        print(f"üë• –õ–∏—Ü –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {analysis['faces_detected']}")
        print(f"üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {analysis['is_presentation']}")
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {analysis['is_document']}")
        print(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {analysis['job_keywords']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")


if __name__ == "__main__":
    test_computer_vision()
