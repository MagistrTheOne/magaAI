"""
Telegram Bot router —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
"""
import logging
from typing import Optional
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, Voice
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramAPIError

from app.settings import settings
from app.services.mode import (
    get_user_mode, set_user_mode, determine_response_mode, get_mode_description
)
from app.services.yandex_llm import complete_text, YandexLLMError
from app.services.yandex_stt import recognize_speech, YandexSTTError
from app.services.tts import synthesize, TTSProviderError
from app.services.tg_utils import (
    send_text_message, send_voice_message, send_audio_message, send_error_message, 
    download_voice_file, TelegramError
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.telegram_bot_token)
dp = Dispatcher()
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router)


@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    current_mode = get_user_mode(user_id)
    mode_description = get_mode_description(current_mode)
    
    welcome_text = (
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ú–∞–≥–∞ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        f"üìã –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n"
        f"üí° {mode_description}\n\n"
        f"üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ /mode auto|text|voice - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞\n"
        f"‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )
    
    try:
        await send_text_message(bot, user_id, welcome_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")


@router.message(Command("mode"))
async def mode_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode."""
    user_id = message.from_user.id
    text = message.text or ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = text.split()
    if len(parts) < 2:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        current_mode = get_user_mode(user_id)
        mode_description = get_mode_description(current_mode)
        
        help_text = (
            f"üìã –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode}\n"
            f"üí° {mode_description}\n\n"
            f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
            f"‚Ä¢ /mode auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä\n"
            f"‚Ä¢ /mode text - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            f"‚Ä¢ /mode voice - —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"
        )
        
        try:
            await send_text_message(bot, user_id, help_text)
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º: {e}")
        return
    
    new_mode = parts[1].lower()
    if new_mode not in ["auto", "text", "voice"]:
        error_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: auto, text –∏–ª–∏ voice"
        try:
            await send_text_message(bot, user_id, error_text)
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Ä–µ–∂–∏–º–∞: {e}")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    set_user_mode(user_id, new_mode)
    mode_description = get_mode_description(new_mode)
    
    success_text = (
        f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_mode}\n"
        f"üí° {mode_description}"
    )
    
    try:
        await send_text_message(bot, user_id, success_text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º –Ω–∞ {new_mode}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")


@router.message()
async def message_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    text = message.text or ""
    
    if not text.strip():
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:100]}...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
        response_mode = determine_response_mode(user_id, "text", text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        llm_response = await complete_text(
            system_prompt="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            user_message=text
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if response_mode == "voice":
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥ TTS
            tts_result = await synthesize(llm_response)
            
            if tts_result["type"] == "voice":
                await send_voice_message(bot, user_id, tts_result["data"], message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                await send_audio_message(bot, user_id, tts_result["data"], message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await send_text_message(bot, user_id, llm_response, message.message_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
    except YandexLLMError as e:
        logger.error(f"–û—à–∏–±–∫–∞ LLM: {e}")
        await send_error_message(bot, user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", message.message_id)
    except TTSProviderError as e:
        logger.error(f"–û—à–∏–±–∫–∞ TTS: {e}")
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        try:
            await send_text_message(bot, user_id, llm_response, message.message_id)
        except:
            await send_error_message(bot, user_id, "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏", message.message_id)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await send_error_message(bot, user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", message.message_id)


@router.message(lambda message: message.voice is not None)
async def voice_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    voice = message.voice
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ STT
        if not settings.yandex_stt_enable:
            error_text = (
                "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ STT –æ—Ç–∫–ª—é—á–µ–Ω.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ STT –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            )
            await send_text_message(bot, user_id, error_text, message.message_id)
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        audio_data = await download_voice_file(bot, voice)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        recognized_text = await recognize_speech(audio_data)
        
        if not recognized_text.strip():
            await send_text_message(bot, user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å", message.message_id)
            return
        
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {recognized_text[:100]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        llm_response = await complete_text(
            system_prompt="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            user_message=recognized_text
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –≥–æ–ª–æ—Å–∞ –≤—Å–µ–≥–¥–∞ –≥–æ–ª–æ—Å)
        response_mode = determine_response_mode(user_id, "voice")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if response_mode == "voice":
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥ TTS
            tts_result = await synthesize(llm_response)
            
            if tts_result["type"] == "voice":
                await send_voice_message(bot, user_id, tts_result["data"], message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                await send_audio_message(bot, user_id, tts_result["data"], message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            await send_text_message(bot, user_id, llm_response, message.message_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
    except YandexSTTError as e:
        logger.error(f"–û—à–∏–±–∫–∞ STT: {e}")
        await send_error_message(bot, user_id, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", message.message_id)
    except YandexLLMError as e:
        logger.error(f"–û—à–∏–±–∫–∞ LLM: {e}")
        await send_error_message(bot, user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", message.message_id)
    except TTSProviderError as e:
        logger.error(f"–û—à–∏–±–∫–∞ TTS: {e}")
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        try:
            await send_text_message(bot, user_id, llm_response, message.message_id)
        except:
            await send_error_message(bot, user_id, "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏", message.message_id)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await send_error_message(bot, user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", message.message_id)


async def set_webhook() -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞."""
    try:
        webhook_url = settings.webhook_url
        secret_token = settings.telegram_webhook_secret
        
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        
        await bot.set_webhook(
            url=webhook_url,
            secret_token=secret_token
        )
        
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        raise


async def close_bot() -> None:
    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º."""
    try:
        await bot.session.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º: {e}")
