"""
–ï–¥–∏–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä AI-Maga - —Å–æ–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã AIMagistr –≤ –µ–¥–∏–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º
"""
import asyncio
import logging
import os
import sys
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime, timedelta
from pathlib import Path
import json

from app.settings import settings
from app.services.mode import get_user_mode, set_user_mode
from app.services.tts import synthesize
from app.services.yandex_llm import complete_text
from app.services.tg_utils import send_text_message, send_voice_message, send_audio_message

# –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AIMagistr
sys.path.append('..')  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞

# –ò–º–ø–æ—Ä—Ç RAG –∏ Memory –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from brain.rag_index import RAGManager
    RAG_AVAILABLE = True
except ImportError:
    RAG_AVAILABLE = False
    logger.warning("RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from memory_palace import MemoryPalace
    MEMORY_AVAILABLE = True
except ImportError:
    MEMORY_AVAILABLE = False
    logger.warning("Memory Palace –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from integrations.yandex_vision import YandexVision
    VISION_AVAILABLE = True
except ImportError:
    VISION_AVAILABLE = False
    logger.warning("Yandex Vision –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

logger = logging.getLogger(__name__)


class CircuitBreaker:
    """–ü—Ä–æ—Å—Ç–æ–π circuit breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç cascade failures"""

    def __init__(self, failure_threshold: int = 5, recovery_timeout: int = 60):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.failure_count = 0
        self.last_failure_time = None
        self.state = 'closed'  # closed, open, half-open

    def call(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ circuit breaker"""
        if self.state == 'open':
            if self._should_attempt_reset():
                self.state = 'half-open'
            else:
                raise Exception("Circuit breaker is OPEN")

        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result
        except Exception as e:
            self._on_failure()
            raise e

    def _should_attempt_reset(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—Ä–∞ –ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è —Å–±—Ä–æ—Å–∏—Ç—å circuit breaker"""
        if self.last_failure_time is None:
            return False
        return (time.time() - self.last_failure_time) >= self.recovery_timeout

    def _on_success(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞"""
        if self.state == 'half-open':
            self.state = 'closed'
            self.failure_count = 0
            logger.info("Circuit breaker reset to CLOSED")

    def _on_failure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞"""
        self.failure_count += 1
        self.last_failure_time = time.time()

        if self.failure_count >= self.failure_threshold:
            self.state = 'open'
            logger.warning(f"Circuit breaker opened after {self.failure_count} failures")


class AIMagaOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä AI-Maga - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""

    def __init__(self):
        self.components = {}
        self.active_tasks = {}
        self.user_sessions = {}
        self.meeting_sessions = {}  # {meeting_id: MeetingSession}
        self.initialized = False

        # RAG, Memory –∏ Vision –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.rag_manager = None
        self.memory_palace = None
        self.vision_client = None

        # Circuit breakers –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
        self.llm_circuit_breaker = CircuitBreaker(failure_threshold=3, recovery_timeout=30)
        self.vision_circuit_breaker = CircuitBreaker(failure_threshold=3, recovery_timeout=30)
        self.stt_circuit_breaker = CircuitBreaker(failure_threshold=3, recovery_timeout=30)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if self.initialized:
            return

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-Maga Orchestrator...")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–∑–≥–∞
            await self._init_ai_brain()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            await self._init_services()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self._init_voice_control()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OS –∫–æ–Ω—Ç—Ä–æ–ª—è
            await self._init_os_control()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            await self._init_autonomous_mode()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
            await self._init_communications()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zoom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await self._init_zoom_integration()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∏ Memory
            await self._init_rag_memory()

            self.initialized = True
            logger.info("AI-Maga Orchestrator –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            raise

    async def _init_ai_brain(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–∑–≥–∞"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AI –∫–ª–∏–µ–Ω—Ç
            from brain.ai_client import YandexAIClient

            self.components['ai_brain'] = YandexAIClient()
            logger.info("AI –º–æ–∑–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.warning(f"AI –º–æ–∑–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.components['ai_brain'] = None

    async def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ AIMagistr"""
        services_to_load = [
            'daily_focus', 'personal_crm', 'health_nudges', 'reading_queue',
            'doc_autocatalog', 'email_triage', 'finance_receipts', 'routines',
            'subscriptions', 'time_blocking', 'travel_assistant'
        ]

        for service_name in services_to_load:
            try:
                module = __import__(f'services.{service_name}', fromlist=[service_name])
                service_class = getattr(module, service_name.replace('_', ' ').title().replace(' ', ''))
                self.components[service_name] = service_class()
                logger.info(f"üì¶ –°–µ—Ä–≤–∏—Å {service_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                logger.warning(f"–°–µ—Ä–≤–∏—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    async def _init_voice_control(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            from app.services.voice_integration import voice_integration

            self.components['voice_integration'] = voice_integration
            voice_integration.set_command_callback(self.handle_voice_command)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            await voice_integration.start_listening()
            logger.info("–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.warning(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")

    async def _init_os_control(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OS –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        try:
            from app.services.os_controller import OSController

            self.components['os_control'] = OSController()
            logger.info("OS –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.warning(f"OS –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π OS –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            try:
                self.components['os_control'] = OSController()
                logger.info("–ë–∞–∑–æ–≤—ã–π OS –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e2:
                logger.warning(f"–ë–∞–∑–æ–≤—ã–π OS –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e2}")

    async def _init_autonomous_mode(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            from app.services.autonomous_agent import autonomous_agent

            self.components['autonomous_agent'] = autonomous_agent
            await autonomous_agent.start()
            logger.info("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    async def _init_communications(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        try:
            from meeting_assistant import MeetingAssistant
            from smart_mail import SmartMail

            self.components['meeting_assistant'] = MeetingAssistant()
            self.components['smart_mail'] = SmartMail()
            logger.info("–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except ImportError as e:
            logger.warning(f"–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

    async def process_image(self, user_id: int, image_path: str, caption: str = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Vision API

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {image_path}")

        try:
            if not self.vision_client:
                return {
                    'type': 'text',
                    'text': '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - Vision API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                    'service': 'vision'
                }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR) —á–µ—Ä–µ–∑ circuit breaker
            try:
                extracted_text = await self.vision_circuit_breaker.call(
                    self.vision_client.extract_text,
                    image_path
                )
            except Exception as e:
                logger.warning(f"Vision circuit breaker triggered for OCR: {e}")
                extracted_text = ""

            if extracted_text:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ LLM
                analysis_prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

                "{extracted_text}"

                {f"–ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {caption}" if caption else ""}

                –î–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.
                """

                analysis = await complete_text(
                    system_prompt="–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –≤—ã–∂–∏–º–∫–∏.",
                    user_message=analysis_prompt
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                if self.memory_palace:
                    try:
                        self.memory_palace.add_memory(
                            content=f"Image analysis: {extracted_text[:200]}...\nAnalysis: {analysis[:200]}...",
                            metadata={
                                'user_id': user_id,
                                'image_path': image_path,
                                'extracted_text': extracted_text,
                                'analysis': analysis,
                                'interaction_type': 'image_analysis'
                            },
                            tags=['image_analysis', 'vision', 'ocr']
                        )
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")

                return {
                    'type': 'text',
                    'text': f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{extracted_text}\n\n–ê–Ω–∞–ª–∏–∑:\n{analysis}",
                    'service': 'vision',
                    'extracted_text': extracted_text,
                    'analysis': analysis
                }
            else:
                # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç —á–µ—Ä–µ–∑ circuit breaker
                try:
                    objects = await self.vision_circuit_breaker.call(
                        self.vision_client.detect_objects,
                        image_path
                    )
                except Exception as e:
                    logger.warning(f"Vision circuit breaker triggered for object detection: {e}")
                    objects = []
                if objects:
                    object_list = [f"- {obj['name']} ({obj['score']:.2f})" for obj in objects[:5]]
                    objects_text = "\n".join(object_list)

                    return {
                        'type': 'text',
                        'text': f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n{objects_text}",
                        'service': 'vision',
                        'objects': objects
                    }
                else:
                    return {
                        'type': 'text',
                        'text': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤',
                        'service': 'vision'
                    }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'type': 'error',
                'text': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
                'service': 'vision'
            }

    async def process_message(self, user_id: int, message_text: str, message_type: str = "text") -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (text/voice)

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {message_text[:100]}...")

        try:
            # –ê–Ω–∞–ª–∏–∑ intent —á–µ—Ä–µ–∑ AI –º–æ–∑–≥
            intent = await self._analyze_intent(message_text)

            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            response = await self._route_to_service(user_id, intent, message_text, message_type)

            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ (—É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            response = await self._post_process_response(user_id, response)

            return response

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "type": "error",
                "text": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                "voice_response": None
            }

    async def _analyze_intent(self, message_text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.components.get('ai_brain'):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π intent engine
                from intent_engine import IntentEngine
                intent_engine = IntentEngine()
                return await intent_engine.analyze(message_text)
            except Exception as e:
                logger.warning(f"Intent –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

        # Fallback: –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        return self._simple_intent_analysis(message_text)

    def _simple_intent_analysis(self, message_text: str) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = message_text.lower()

        intents = {
            'daily_focus': ['—Ñ–æ–∫—É—Å', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–∑–∞–¥–∞—á–∏', '–ø–ª–∞–Ω'],
            'health_nudges': ['–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–ø–æ—Ä—Ç', '–µ–¥–∞', '–æ—Ç–¥—ã—Ö'],
            'personal_crm': ['–∫–æ–Ω—Ç–∞–∫—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–ª—é–¥–∏', '—Å–≤—è–∑–∏'],
            'email_triage': ['–ø–æ—á—Ç–∞', 'email', '–ø–∏—Å—å–º–æ', '—Å–æ–æ–±—â–µ–Ω–∏–µ'],
            'finance': ['–¥–µ–Ω—å–≥–∏', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±—é–¥–∂–µ—Ç', '—Ä–∞—Å—Ö–æ–¥—ã'],
            'calendar': ['–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–≤—Ä–µ–º—è', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–≤—Å—Ç—Ä–µ—á–∞'],
            'os_control': ['–æ—Ç–∫—Ä–æ–π', '–∑–∞–ø—É—Å—Ç–∏—Ç—å', '—Ñ–∞–π–ª', '–ø—Ä–æ–≥—Ä–∞–º–º–∞'],
            'meeting': ['zoom', '–≤—Å—Ç—Ä–µ—á–∞', '–º–∏—Ç–∏–Ω–≥', '–∑–≤–æ–Ω–æ–∫']
        }

        for intent, keywords in intents.items():
            if any(keyword in text_lower for keyword in keywords):
                return {
                    'intent': intent,
                    'confidence': 0.8,
                    'entities': [],
                    'original_text': message_text
                }

        return {
            'intent': 'general_chat',
            'confidence': 0.5,
            'entities': [],
            'original_text': message_text
        }

    async def _route_to_service(self, user_id: int, intent: Dict, message_text: str, message_type: str) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–∏—Å—É"""
        intent_name = intent.get('intent', 'general_chat')

        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
        service_mapping = {
            'daily_focus': 'daily_focus',
            'health_nudges': 'health_nudges',
            'personal_crm': 'personal_crm',
            'email_triage': 'email_triage',
            'finance': 'finance_receipts',
            'calendar': 'time_blocking',
            'os_control': 'os_control',
            'meeting': 'meeting_assistant'
        }

        service_name = service_mapping.get(intent_name)
        if service_name and service_name in self.components:
            return await self._execute_service(service_name, user_id, message_text, intent)

        # –û–±—â–∏–π —á–∞—Ç —á–µ—Ä–µ–∑ AI
        return await self._handle_general_chat(user_id, message_text, message_type)

    async def _execute_service(self, service_name: str, user_id: int, message_text: str, intent: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
        service = self.components[service_name]

        try:
            if service_name == 'daily_focus':
                result = await service.get_daily_focus(user_id)
                return {
                    'type': 'text',
                    'text': f"–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–æ–∫—É—Å:\n{result}",
                    'service': 'daily_focus'
                }

            elif service_name == 'health_nudges':
                result = await service.get_health_nudges(user_id)
                return {
                    'type': 'text',
                    'text': f"–°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é:\n{result}",
                    'service': 'health_nudges'
                }

            elif service_name == 'os_control':
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
                from app.services.security_enhancement import security_enhancement
                security_check = security_enhancement.validate_command_safety(
                    message_text, intent.get('user_id', 0)
                )

                if security_check['blocked']:
                    return {
                        'type': 'text',
                        'text': f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n{'; '.join(security_check['warnings'])}",
                        'service': 'os_control'
                    }

                if security_check['warnings']:
                    logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_check['warnings']}")

                # OS –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await self._confirm_os_command(message_text)
                result = await service.execute_command(message_text, intent.get('user_id'))
                if result['success']:
                    return {
                        'type': 'text',
                        'text': f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ:\n{result.get('output', 'OK')}",
                        'service': 'os_control'
                    }
                else:
                    return {
                        'type': 'text',
                        'text': f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                        'service': 'os_control'
                    }

            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
            return {
                'type': 'error',
                'text': f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {str(e)}",
                'service': service_name
            }

    async def _handle_general_chat(self, user_id: int, message_text: str, message_type: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response_mode = get_user_mode(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG (graceful degradation)
            rag_context = ""
            if self.rag_manager:
                try:
                    rag_context = self.rag_manager.search_context(message_text, max_length=500)
                    if rag_context and rag_context != "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω":
                        rag_context = f"\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–∞–º—è—Ç–∏:\n{rag_context}"
                    else:
                        logger.debug("RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ: {e}")
            else:
                logger.debug("RAG –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—à–µ–Ω–∏–π
            decision_profile = getattr(settings, 'ai_decision_profile', 'balanced')
            profile_prompts = {
                'conservative': "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
                'balanced': "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.",
                'active': "–ë—É–¥—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."
            }

            base_prompt = """–¢—ã - AI-Maga, —É–º–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
            –¢—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ,
            —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ—á—Ç–æ–π, –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ –º–Ω–æ–≥–∏–º–∏ –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""

            system_prompt = f"{base_prompt}\n{profile_prompts.get(decision_profile, profile_prompts['balanced'])}{rag_context}"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º circuit breaker –¥–ª—è LLM
            try:
                ai_response = await self.llm_circuit_breaker.call(
                    complete_text,
                    system_prompt=system_prompt,
                    user_message=message_text
                )
            except Exception as e:
                logger.warning(f"LLM circuit breaker triggered: {e}")
                # Graceful degradation - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ Memory Palace (graceful degradation)
            if self.memory_palace:
                try:
                    self.memory_palace.add_memory(
                        content=f"User: {message_text}\nAI: {ai_response}",
                        metadata={
                            'user_id': user_id,
                            'message_type': message_type,
                            'interaction_type': 'chat',
                            'decision_profile': decision_profile
                        },
                        tags=['user_interaction', 'ai_response', message_type]
                    )
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º: {e}")
            else:
                logger.debug("Memory Palace –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ Zoom –¥–ª—è gating
            active_meetings = [mid for mid, session in self.meeting_sessions.items() if not session.ai_muted]
            if active_meetings:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –≤—Å—Ç—Ä–µ—á–∏ –∫ –æ—Ç–≤–µ—Ç—É
                for meeting_id in active_meetings:
                    session = self.meeting_sessions[meeting_id]
                    policy_result = await session.check_message(ai_response)
                    if not policy_result.allowed:
                        logger.info(f"–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {policy_result.reason}")
                        ai_response = f"[–ó–∞–≥–ª—É—à–µ–Ω –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ {meeting_id}] {ai_response}"
                        break

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            if response_mode == "voice" or message_type == "voice":
                try:
                    audio_result = await synthesize(ai_response)
                    return {
                        'type': 'voice' if audio_result['type'] == 'voice' else 'audio',
                        'text': ai_response,
                        'audio_data': audio_result['data'],
                        'service': 'ai_chat'
                    }
                except Exception as e:
                    logger.warning(f"TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç: {e}")

            return {
                'type': 'text',
                'text': ai_response,
                'service': 'ai_chat'
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ —á–∞—Ç–∞: {e}")
            return {
                'type': 'error',
                'text': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                'service': 'ai_chat'
            }

    async def _confirm_os_command(self, command: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö OS –∫–æ–º–∞–Ω–¥"""
        dangerous_commands = ['rm', 'del', 'delete', 'format', 'shutdown']

        if any(cmd in command.lower() for cmd in dangerous_commands):
            logger.warning(f"–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {command}")
            raise ValueError("–û–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        return True

    async def _post_process_response(self, user_id: int, response: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —É–ª—É—á—à–µ–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp
        response['timestamp'] = datetime.now().isoformat()

        # –î–æ–±–∞–≤–ª—è–µ–º user_id
        response['user_id'] = user_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ Memory Palace
        if self.memory_palace and response.get('type') != 'error':
            try:
                content = f"Service: {response.get('service', 'unknown')}\nResponse: {response.get('text', '')}"
                if response.get('type') == 'voice' or response.get('type') == 'audio':
                    content += " [Voice/Audio response]"

                self.memory_palace.add_memory(
                    content=content,
                    metadata={
                        'user_id': user_id,
                        'response_type': response.get('type'),
                        'service': response.get('service'),
                        'interaction_type': 'service_response'
                    },
                    tags=['system_response', response.get('service', 'unknown'), response.get('type', 'text')]
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ø–∞–º—è—Ç—å: {e}")

        return response

    async def handle_voice_command(self, command: str, confidence: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if confidence < 0.7:
            logger.info(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {confidence}")
            return

        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        try:
            from app.services.voice_integration import voice_integration
            processed = await voice_integration.process_voice_command(command)
            command = processed['processed_command']
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π user_id –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        voice_user_id = 0  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≥–æ–ª–æ—Å–∞

        try:
            result = await self.process_message(voice_user_id, command, "voice")

            # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ

            if result.get('type') == 'text':
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result['text']}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

    async def start_autonomous_mode(self, user_id: int):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if 'auto_pilot' not in self.components:
            logger.warning("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        task = asyncio.create_task(self._run_autonomous_tasks(user_id))
        self.active_tasks[user_id] = task

    async def stop_autonomous_mode(self, user_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if user_id in self.active_tasks:
            self.active_tasks[user_id].cancel()
            del self.active_tasks[user_id]
            logger.info(f"–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def _run_autonomous_tasks(self, user_id: int):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏
                await self._check_upcoming_meetings(user_id)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö email
                await self._check_important_emails(user_id)

                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await self._monitor_health_productivity(user_id)

                # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
                await self._plan_tasks(user_id)

                # –ü–∞—É–∑–∞ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)

        except asyncio.CancelledError:
            logger.info(f"–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")

    async def _check_upcoming_meetings(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á"""
        try:
            zoom_client = self.components.get('zoom_client')
            if zoom_client:
                meetings = await zoom_client.list_meetings()
                upcoming = [m for m in meetings if m.get('status') == 'scheduled']
                if upcoming:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(upcoming)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á: {e}")

    async def _check_important_emails(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö email"""
        try:
            email_service = self.components.get('email_triage')
            if email_service:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∂–Ω—ã—Ö email
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: {e}")

    async def _monitor_health_productivity(self, user_id: int):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            health_service = self.components.get('health_nudges')
            if health_service:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
                logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

    async def _plan_tasks(self, user_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        try:
            focus_service = self.components.get('daily_focus')
            if focus_service:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
                logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á: {e}")

    def get_available_services(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return list(self.components.keys())

    async def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        health = {
            'overall_status': 'healthy',
            'components': {},
            'circuit_breakers': {},
            'timestamp': datetime.now().isoformat()
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components_to_check = {
            'rag_manager': self.rag_manager,
            'memory_palace': self.memory_palace,
            'vision_client': self.vision_client
        }

        for component_name, component in components_to_check.items():
            try:
                if component is None:
                    health['components'][component_name] = {'status': 'not_available'}
                elif hasattr(component, 'get_stats'):
                    stats = component.get_stats()
                    health['components'][component_name] = {'status': 'healthy', 'stats': stats}
                elif hasattr(component, 'get_usage_stats'):
                    stats = await component.get_usage_stats()
                    health['components'][component_name] = {'status': 'healthy', 'stats': stats}
                else:
                    health['components'][component_name] = {'status': 'healthy'}
            except Exception as e:
                health['components'][component_name] = {'status': 'error', 'error': str(e)}
                health['overall_status'] = 'degraded'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breakers
        circuit_breakers = {
            'llm_circuit_breaker': self.llm_circuit_breaker,
            'vision_circuit_breaker': self.vision_circuit_breaker,
            'stt_circuit_breaker': self.stt_circuit_breaker
        }

        for cb_name, cb in circuit_breakers.items():
            health['circuit_breakers'][cb_name] = {
                'state': cb.state,
                'failure_count': cb.failure_count,
                'last_failure_time': cb.last_failure_time
            }
            if cb.state == 'open':
                health['overall_status'] = 'degraded'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        for service_name, service in self.components.items():
            try:
                if hasattr(service, 'get_status'):
                    service_status = service.get_status()
                    health['components'][f'service_{service_name}'] = service_status
                else:
                    health['components'][f'service_{service_name}'] = {'status': 'unknown'}
            except Exception as e:
                health['components'][f'service_{service_name}'] = {'status': 'error', 'error': str(e)}
                health['overall_status'] = 'degraded'

        return health

    def get_system_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        import psutil
        import os

        metrics = {
            'timestamp': datetime.now().isoformat(),
            'process': {
                'pid': os.getpid(),
                'cpu_percent': psutil.Process().cpu_percent(),
                'memory_mb': psutil.Process().memory_info().rss / 1024 / 1024,
                'threads': psutil.Process().num_threads()
            },
            'system': {
                'cpu_percent': psutil.cpu_percent(interval=1),
                'memory_percent': psutil.virtual_memory().percent,
                'disk_percent': psutil.disk_usage('/').percent
            },
            'orchestrator': {
                'active_tasks': len(self.active_tasks),
                'meeting_sessions': len(self.meeting_sessions),
                'initialized': self.initialized
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.memory_palace and hasattr(self.memory_palace, 'get_memory_stats'):
            try:
                memory_stats = self.memory_palace.get_memory_stats()
                metrics['memory_palace'] = memory_stats
            except Exception as e:
                metrics['memory_palace'] = {'error': str(e)}

        if self.rag_manager and hasattr(self.rag_manager, 'index') and hasattr(self.rag_manager.index, 'get_stats'):
            try:
                rag_stats = self.rag_manager.index.get_stats()
                metrics['rag_index'] = rag_stats
            except Exception as e:
                metrics['rag_index'] = {'error': str(e)}

        return metrics

    def get_service_status(self, service_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
        if service_name in self.components:
            return {
                'name': service_name,
                'status': 'active',
                'type': type(self.components[service_name]).__name__
            }
        return {
            'name': service_name,
            'status': 'not_available'
        }

    async def _init_zoom_integration(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zoom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            from app.services.zoom_api import zoom_client
            from app.services.meeting_policy import MeetingSession, MeetingProfile
            
            self.components['zoom_client'] = zoom_client
            self.components['meeting_policy'] = MeetingSession
            self.components['meeting_profile'] = MeetingProfile
            
            logger.info("Zoom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except ImportError as e:
            logger.warning(f"Zoom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.components['zoom_client'] = None

    async def on_zoom_webhook(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π Zoom"""
        try:
            event_type = event.get("event")
            meeting_id = event.get("payload", {}).get("object", {}).get("id")
            
            if not meeting_id:
                return {"status": "error", "message": "No meeting ID in event"}
            
            if event_type == "meeting.started":
                await self._handle_meeting_started(meeting_id, event)
            elif event_type == "meeting.ended":
                await self._handle_meeting_ended(meeting_id, event)
            elif event_type == "recording.completed":
                await self._handle_recording_completed(meeting_id, event)
            
            return {"status": "success", "event": event_type, "meeting_id": meeting_id}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Zoom webhook: {e}")
            return {"status": "error", "message": str(e)}

    async def _handle_meeting_started(self, meeting_id: str, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏"""
        from app.services.meeting_policy import MeetingSession, MeetingProfile
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤—Å—Ç—Ä–µ—á–∏
        session = MeetingSession(meeting_id, MeetingProfile.NOTE_TAKER)
        self.meeting_sessions[meeting_id] = session
        session.start_time = datetime.now()
        
        logger.info(f"–í—Å—Ç—Ä–µ—á–∞ {meeting_id} –Ω–∞—á–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è")

    async def _handle_meeting_ended(self, meeting_id: str, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
        session = self.meeting_sessions.get(meeting_id)
        if not session:
            return
        
        session.end_time = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É –∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ
        await self._create_meeting_summary(meeting_id, session)
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        del self.meeting_sessions[meeting_id]
        logger.info(f"–í—Å—Ç—Ä–µ—á–∞ {meeting_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")

    async def _handle_recording_completed(self, meeting_id: str, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        session = self.meeting_sessions.get(meeting_id)
        if session:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self._process_meeting_recording(meeting_id, session)

    async def _create_meeting_summary(self, meeting_id: str, session):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ Yandex LLM"""
        try:
            zoom_client = self.components.get('zoom_client')
            if not zoom_client:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É
            transcript = await zoom_client.get_transcript(meeting_id)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ STT
            if not transcript:
                logger.info(f"–°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}, –ø—ã—Ç–∞–µ–º—Å—è STT fallback")
                transcript = await self._get_transcript_via_stt(meeting_id, zoom_client)
            
            if not transcript:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ LLM
            summary_prompt = f"""
            –°–¥–µ–ª–∞–π –∏—Ç–æ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏: —Ü–µ–ª–∏, –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Ä–∏—Å–∫–∏, —è–≤–Ω—ã–µ next steps —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω.
            
            –°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞:
            {transcript}
            """
            
            summary = await complete_text(summary_prompt)
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥, –ø–µ—Ä–µ–≤–æ–¥–∏–º
            if settings.yandex_translate_enabled:
                from app.services.yandex_translate import translate_text
                translated_summary = await translate_text(summary, target_lang="en")
                summary = f"üá∑üá∫ {summary}\n\nüá∫üá∏ {translated_summary}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ
            await self._save_meeting_summary(meeting_id, summary, session)
            
            logger.info(f"–†–µ–∑—é–º–µ –≤—Å—Ç—Ä–µ—á–∏ {meeting_id} —Å–æ–∑–¥–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {e}")

    async def _get_transcript_via_stt(self, meeting_id: str, zoom_client) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ STT fallback"""
        import tempfile
        import os
        import httpx

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–∏
            recording_files = await zoom_client.get_recording_files(meeting_id)
            if not recording_files:
                logger.info(f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
                return None

            # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º M4A, –∑–∞—Ç–µ–º MP3, –∑–∞—Ç–µ–º WAV)
            audio_files = [f for f in recording_files if f.get('file_type') in ['M4A', 'MP3', 'WAV']]
            if not audio_files:
                logger.info(f"–ù–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è STT –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
                return None

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—é —Ñ–æ—Ä–º–∞—Ç–∞
            format_priority = {'M4A': 0, 'WAV': 1, 'MP3': 2}
            audio_files.sort(key=lambda x: format_priority.get(x.get('file_type', 'MP3'), 3))
            audio_file = audio_files[0]

            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª {audio_file.get('file_name')} —á–µ—Ä–µ–∑ STT")

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏
            download_url = audio_file.get('download_url')
            if not download_url:
                logger.warning(f"–ù–µ—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {audio_file.get('file_name')}")
                return None

            # –°–∫–∞—á–∏–≤–∞–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            headers = {"Authorization": f"Bearer {await zoom_client._get_access_token()}"}

            async with httpx.AsyncClient(timeout=300.0) as client:  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                response = await client.get(download_url, headers=headers)
                response.raise_for_status()
                audio_data = response.content

            if not audio_data:
                logger.warning(f"–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ {audio_file.get('file_name')}")
                return None

            logger.info(f"–°–∫–∞—á–∞–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª: {len(audio_data)} –±–∞–π—Ç")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            file_ext = audio_file.get('file_type', 'M4A').lower()
            with tempfile.NamedTemporaryFile(suffix=f'.{file_ext}', delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_audio_path = temp_file.name

            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (Yandex STT –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å WAV)
                wav_path = temp_audio_path
                if file_ext != 'wav':
                    wav_path = await self._convert_audio_to_wav(temp_audio_path, file_ext)
                    if not wav_path:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {file_ext} –≤ WAV")
                        return None

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Yandex STT —Å circuit breaker
                try:
                    transcript = await self.stt_circuit_breaker.call(
                        self._process_audio_with_stt,
                        wav_path
                    )
                except Exception as e:
                    logger.warning(f"STT circuit breaker triggered: {e}")
                    transcript = None

                if transcript:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ —á–µ—Ä–µ–∑ STT: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return transcript
                else:
                    logger.warning("STT –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É")
                    return None

            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.unlink(temp_audio_path)
                    if wav_path != temp_audio_path:
                        os.unlink(wav_path)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ STT fallback –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {e}")
            return None

    async def _convert_audio_to_wav(self, input_path: str, input_format: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç"""
        import ffmpeg
        import tempfile
        import os

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
            try:
                import subprocess
                subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                logger.warning("ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
                return None

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è WAV
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                output_path = temp_wav.name

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg-python
            stream = ffmpeg.input(input_path)
            stream = ffmpeg.output(stream, output_path,
                                 acodec='pcm_s16le',  # WAV —Ñ–æ—Ä–º–∞—Ç
                                 ar='16000',         # 16kHz sample rate
                                 ac=1)               # mono

            ffmpeg.run(stream, overwrite_output=True, quiet=True)

            logger.info(f"–ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {input_format} -> WAV")
            return output_path

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            # –û—á–∏—â–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            try:
                if 'output_path' in locals():
                    os.unlink(output_path)
            except:
                pass
            return None

    async def _process_audio_with_stt(self, wav_path: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WAV —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Yandex STT"""
        try:
            from app.services.yandex_stt import recognize_speech

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(wav_path, 'rb') as f:
                audio_data = f.read()

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π (Yandex STT –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
            chunk_size = 10 * 1024 * 1024  # 10MB chunks
            if len(audio_data) > chunk_size:
                logger.info("–§–∞–π–ª –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è STT")
                return await self._process_audio_chunks(audio_data, chunk_size)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–∏–º —á–∞–Ω–∫–æ–º
                transcript = await recognize_speech(
                    audio_data=audio_data,
                    format='lpcm',  # WAV format for Yandex
                    language='ru-RU'  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å configurable
                )

                return transcript

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ STT: {e}")
            return None

    async def _process_audio_chunks(self, audio_data: bytes, chunk_size: int) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞–Ω–∫–∞–º"""
        try:
            from app.services.yandex_stt import recognize_speech

            transcripts = []

            for i in range(0, len(audio_data), chunk_size):
                chunk = audio_data[i:i + chunk_size]
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {i // chunk_size + 1}")

                try:
                    chunk_transcript = await recognize_speech(
                        audio_data=chunk,
                        format='lpcm',
                        language='ru-RU'
                    )

                    if chunk_transcript:
                        transcripts.append(chunk_transcript)

                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i // chunk_size + 1}: {e}")
                    continue

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã
            if transcripts:
                full_transcript = " ".join(transcripts)
                logger.info(f"–°–æ–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ –∏–∑ {len(transcripts)} —á–∞–Ω–∫–æ–≤")
                return full_transcript
            else:
                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤: {e}")
            return None

    async def _save_meeting_summary(self, meeting_id: str, summary: str, session):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –≤—Å—Ç—Ä–µ—á–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        summary_file = f"meeting_summaries/{meeting_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        os.makedirs("meeting_summaries", exist_ok=True)
        
        with open(summary_file, "w", encoding="utf-8") as f:
            f.write(f"–í—Å—Ç—Ä–µ—á–∞: {meeting_id}\n")
            f.write(f"–í—Ä–µ–º—è: {session.start_time} - {session.end_time}\n")
            f.write(f"–ü—Ä–æ—Ñ–∏–ª—å: {session.profile.value}\n")
            f.write(f"–Ø–∑—ã–∫: {session.language}\n\n")
            f.write("–†–ï–ó–Æ–ú–ï:\n")
            f.write(summary)
        
        logger.info(f"–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {summary_file}")

    async def _process_meeting_recording(self, meeting_id: str, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏"""
        try:
            zoom_client = self.components.get('zoom_client')
            if not zoom_client:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–∏
            recording_files = await zoom_client.get_recording_files(meeting_id)
            if not recording_files:
                logger.info(f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}")
                return
            
            # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è STT
            audio_files = [f for f in recording_files if f.get('file_type') in ['M4A', 'MP3', 'WAV']]
            if audio_files:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Yandex STT
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}: {e}")

    # Zoom –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram
    async def zoom_join_meeting(self, user_id: int, meeting_id: str, password: str = None) -> Dict[str, Any]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ Zoom"""
        try:
            zoom_client = self.components.get('zoom_client')
            if not zoom_client:
                return {"status": "error", "message": "Zoom client not available"}
            
            join_info = await zoom_client.join_meeting(meeting_id, password)
            return {"status": "success", "data": join_info}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤—Å—Ç—Ä–µ—á–µ {meeting_id}: {e}")
            return {"status": "error", "message": str(e)}

    async def zoom_create_meeting(self, user_id: int, topic: str, **kwargs) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ Zoom"""
        try:
            zoom_client = self.components.get('zoom_client')
            if not zoom_client:
                return {"status": "error", "message": "Zoom client not available"}
            
            meeting = await zoom_client.create_meeting(topic, **kwargs)
            return {"status": "success", "data": meeting}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: {e}")
            return {"status": "error", "message": str(e)}

    async def zoom_set_meeting_mode(self, user_id: int, meeting_id: str, mode: str) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ò–ò –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            from app.services.meeting_policy import MeetingProfile
            
            session = self.meeting_sessions.get(meeting_id)
            if not session:
                return {"status": "error", "message": "Meeting session not found"}
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∂–∏–º
            profile_map = {
                "silent": MeetingProfile.SILENT,
                "note_taker": MeetingProfile.NOTE_TAKER,
                "cohost": MeetingProfile.COHOST
            }
            
            if mode not in profile_map:
                return {"status": "error", "message": f"Invalid mode: {mode}"}
            
            session.set_profile(profile_map[mode])
            return {"status": "success", "mode": mode}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            return {"status": "error", "message": str(e)}

    async def zoom_mute_ai(self, user_id: int, meeting_id: str) -> Dict[str, Any]:
        """–ó–∞–≥–ª—É—à–∏—Ç—å –ò–ò –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            session = self.meeting_sessions.get(meeting_id)
            if not session:
                return {"status": "error", "message": "Meeting session not found"}
            
            session.mute_ai()
            return {"status": "success", "muted": True}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è –ò–ò: {e}")
            return {"status": "error", "message": str(e)}

    async def zoom_get_status(self, user_id: int, meeting_id: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å—Ç—Ä–µ—á"""
        try:
            zoom_client = self.components.get('zoom_client')
            if not zoom_client:
                return {"status": "error", "message": "Zoom client not available"}
            
            if meeting_id:
                # –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
                session = self.meeting_sessions.get(meeting_id)
                if session:
                    return {
                        "status": "success",
                        "meeting_id": meeting_id,
                        "profile": session.profile.value,
                        "ai_muted": session.ai_muted,
                        "start_time": session.start_time.isoformat() if session.start_time else None
                    }
                else:
                    return {"status": "error", "message": "Meeting session not found"}
            else:
                # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
                active_meetings = []
                for mid, session in self.meeting_sessions.items():
                    active_meetings.append({
                        "meeting_id": mid,
                        "profile": session.profile.value,
                        "ai_muted": session.ai_muted,
                        "start_time": session.start_time.isoformat() if session.start_time else None
                    })
                
                return {"status": "success", "active_meetings": active_meetings}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"status": "error", "message": str(e)}

    async def _init_rag_memory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∏ Memory Palace"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG
            if RAG_AVAILABLE:
                self.rag_manager = RAGManager()
                if self.rag_manager.initialize():
                    logger.info("RAG –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä")
                    self.rag_manager = None
            else:
                logger.warning("RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Memory Palace
            if MEMORY_AVAILABLE:
                self.memory_palace = MemoryPalace()
                logger.info("Memory Palace –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("Memory Palace –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vision
            if VISION_AVAILABLE and settings.vision_enabled:
                self.vision_client = YandexVision()
                logger.info("Yandex Vision –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            elif VISION_AVAILABLE and not settings.vision_enabled:
                logger.info("Yandex Vision –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            else:
                logger.warning("Yandex Vision –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG/Memory: {e}")
            self.rag_manager = None
            self.memory_palace = None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
orchestrator = AIMagaOrchestrator()


async def get_orchestrator() -> AIMagaOrchestrator:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    if not orchestrator.initialized:
        await orchestrator.initialize()
    return orchestrator
