"""UX commands for AI-Maga."""

import asyncio
from typing import Optional
from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.services.yandex_llm import complete_text
from app.observability.logging import app_logger


async def handle_summary_command(message: Message, bot: Bot, state: FSMContext):
    """Handle /summary command - generate brief summary."""
    try:
        # Get user message
        user_text = message.text.replace("/summary", "").strip()
        if not user_text:
            await message.answer(
                "üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è.\n"
                "–ü—Ä–∏–º–µ—Ä: /summary –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è...",
                parse_mode="HTML"
            )
            return
        
        # Show typing indicator
        await bot.send_chat_action(message.chat.id, "typing")
        
        # Generate summary
        system_prompt = (
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫—Ä–∞—Ç–∫–∏—Ö –∏–∑–ª–æ–∂–µ–Ω–∏–π. "
            "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã. "
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
        )
        
        summary = await complete_text(
            system_prompt=system_prompt,
            user_message=user_text,
            temperature=0.3,
            max_tokens=200
        )
        
        await message.answer(
            f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n{summary}",
            parse_mode="HTML"
        )
        
        app_logger.info("Summary command executed", extra_fields={
            "user_id": message.from_user.id,
            "text_length": len(user_text),
            "summary_length": len(summary)
        })
        
    except Exception as e:
        app_logger.error(f"Summary command error: {e}", extra_fields={
            "user_id": message.from_user.id
        })
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_translate_command(message: Message, bot: Bot, state: FSMContext):
    """Handle /translate command - translate text."""
    try:
        # Get user message
        user_text = message.text.replace("/translate", "").strip()
        if not user_text:
            await message.answer(
                "üåê <b>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /translate Hello world",
                parse_mode="HTML"
            )
            return
        
        # Show typing indicator
        await bot.send_chat_action(message.chat.id, "typing")
        
        # Detect language and translate
        system_prompt = (
            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. "
            "–û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, "
            "–∏–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
        )
        
        translation = await complete_text(
            system_prompt=system_prompt,
            user_message=user_text,
            temperature=0.1,
            max_tokens=300
        )
        
        await message.answer(
            f"üåê <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n\n{translation}",
            parse_mode="HTML"
        )
        
        app_logger.info("Translate command executed", extra_fields={
            "user_id": message.from_user.id,
            "text_length": len(user_text),
            "translation_length": len(translation)
        })
        
    except Exception as e:
        app_logger.error(f"Translate command error: {e}", extra_fields={
            "user_id": message.from_user.id
        })
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_help_command(message: Message, bot: Bot, state: FSMContext):
    """Handle /help command with inline buttons."""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ", callback_data="help_summary"),
                InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–≤–æ–¥", callback_data="help_translate")
            ],
            [
                InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="help_voice"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="help_settings")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="help_stats"),
                InlineKeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support")
            ]
        ])
        
        help_text = (
            "ü§ñ <b>AI-–ú–∞–≥–∏—Å—Ç—Ä - –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ <code>/summary</code> - –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ <code>/translate</code> - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ <code>/mode auto|text|voice</code> - –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤\n"
            "‚Ä¢ <code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
        
        await message.answer(help_text, parse_mode="HTML", reply_markup=keyboard)
        
        app_logger.info("Help command executed", extra_fields={
            "user_id": message.from_user.id
        })
        
    except Exception as e:
        app_logger.error(f"Help command error: {e}", extra_fields={
            "user_id": message.from_user.id
        })
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")


async def handle_help_callback(callback_query, bot: Bot):
    """Handle help callback queries."""
    try:
        data = callback_query.data
        user_id = callback_query.from_user.id
        
        if data == "help_summary":
            text = (
                "üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
                "–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "<code>/summary –í–∞—à –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/summary –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Äî —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è...</code>"
            )
        elif data == "help_translate":
            text = (
                "üåê <b>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</b>\n\n"
                "–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏.\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "<code>/translate –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/translate Hello world</code>\n"
                "<code>/translate –ü—Ä–∏–≤–µ—Ç –º–∏—Ä</code>"
            )
        elif data == "help_voice":
            text = (
                "üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–º.\n"
                "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ üîä –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n\n"
                "<b>–†–µ–∂–∏–º—ã:</b>\n"
                "‚Ä¢ <code>auto</code> - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä\n"
                "‚Ä¢ <code>voice</code> - –í—Å–µ–≥–¥–∞ –≥–æ–ª–æ—Å\n"
                "‚Ä¢ <code>text</code> - –í—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç"
            )
        elif data == "help_settings":
            text = (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ <code>/mode auto</code> - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
                "‚Ä¢ <code>/mode voice</code> - –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º\n"
                "‚Ä¢ <code>/mode text</code> - –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
            )
        elif data == "help_stats":
            text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/metrics</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            )
        elif data == "help_support":
            text = (
                "‚ùì <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π <code>/start</code>"
            )
        else:
            text = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∫–∏."
        
        await callback_query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="help_back")]
            ])
        )
        
        await callback_query.answer()
        
        app_logger.info("Help callback executed", extra_fields={
            "user_id": user_id,
            "callback_data": data
        })
        
    except Exception as e:
        app_logger.error(f"Help callback error: {e}", extra_fields={
            "user_id": callback_query.from_user.id,
            "callback_data": callback_query.data
        })
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def handle_help_back_callback(callback_query, bot: Bot):
    """Handle help back callback."""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ", callback_data="help_summary"),
                InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–≤–æ–¥", callback_data="help_translate")
            ],
            [
                InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="help_voice"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="help_settings")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="help_stats"),
                InlineKeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support")
            ]
        ])
        
        help_text = (
            "ü§ñ <b>AI-–ú–∞–≥–∏—Å—Ç—Ä - –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ <code>/summary</code> - –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ <code>/translate</code> - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ <code>/mode auto|text|voice</code> - –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤\n"
            "‚Ä¢ <code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
        
        await callback_query.message.edit_text(
            help_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await callback_query.answer()
        
    except Exception as e:
        app_logger.error(f"Help back callback error: {e}", extra_fields={
            "user_id": callback_query.from_user.id
        })
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø—Ä–∞–≤–∫–µ.")
