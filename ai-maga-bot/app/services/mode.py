"""
–õ–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–≤–µ—Ç–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
import logging
import re
from typing import Dict, Literal, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class UserMode:
    """–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    mode: Literal["auto", "text", "voice"]
    user_id: int


class ModeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    def __init__(self):
        # In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∂–∏–º–æ–≤ (–¥–ª—è MVP)
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis
        self._user_modes: Dict[int, Literal["auto", "text", "voice"]] = {}
    
    def get_user_mode(self, user_id: int) -> Literal["auto", "text", "voice"]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "auto")
        """
        return self._user_modes.get(user_id, "auto")
    
    def set_user_mode(self, user_id: int, mode: Literal["auto", "text", "voice"]) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mode: –ù–æ–≤—ã–π —Ä–µ–∂–∏–º
        """
        self._user_modes[user_id] = mode
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ–∂–∏–º: {mode}")
    
    def determine_response_mode(
        self, 
        user_id: int, 
        input_type: Literal["text", "voice"], 
        text_content: Optional[str] = None
    ) -> Literal["text", "voice"]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            input_type: –¢–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            text_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ ("text" –∏–ª–∏ "voice")
        """
        user_mode = self.get_user_mode(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —É–∫–∞–∑–∞–ª —Ä–µ–∂–∏–º
        if user_mode == "text":
            return "text"
        elif user_mode == "voice":
            return "voice"
        
        # Auto-—Ä–µ–∂–∏–º: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if input_type == "voice":
            # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–º
            return "voice"
        
        if text_content:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
            voice_markers = [
                "üîä", "voice", "/voice", "–≥–æ–ª–æ—Å", "–≥–æ–≤–æ—Ä–∏", "—Å–∫–∞–∂–∏"
            ]
            
            text_lower = text_content.lower()
            for marker in voice_markers:
                if marker.lower() in text_lower:
                    logger.debug(f"–ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –≥–æ–ª–æ—Å–∞ '{marker}' –≤ —Ç–µ–∫—Å—Ç–µ")
                    return "voice"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return "text"
    
    def get_mode_description(self, mode: Literal["auto", "text", "voice"]) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞.
        
        Args:
            mode: –†–µ–∂–∏–º
            
        Returns:
            –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        """
        descriptions = {
            "auto": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–≥–æ–ª–æ—Å ‚Üí –≥–æ–ª–æ—Å, —Ç–µ–∫—Å—Ç ‚Üí —Ç–µ–∫—Å—Ç, —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ üîä ‚Üí –≥–æ–ª–æ—Å)",
            "text": "–í—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã",
            "voice": "–í—Å–µ–≥–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"
        }
        return descriptions.get(mode, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤
mode_manager = ModeManager()


def get_user_mode(user_id: int) -> Literal["auto", "text", "voice"]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return mode_manager.get_user_mode(user_id)


def set_user_mode(user_id: int, mode: Literal["auto", "text", "voice"]) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    mode_manager.set_user_mode(user_id, mode)


def determine_response_mode(
    user_id: int, 
    input_type: Literal["text", "voice"], 
    text_content: Optional[str] = None
) -> Literal["text", "voice"]:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞."""
    return mode_manager.determine_response_mode(user_id, input_type, text_content)


def get_mode_description(mode: Literal["auto", "text", "voice"]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞."""
    return mode_manager.get_mode_description(mode)
