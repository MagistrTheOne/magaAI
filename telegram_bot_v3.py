# -*- coding: utf-8 -*-
"""
AIMagistr 3.0 - Telegram Bot —Å Yandex AI
–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –¥–∏–∞–ª–æ–≥–∏, —Ñ–∞–π–ª—ã, –∫–æ–º–∞–Ω–¥—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç
"""

import asyncio
import logging
import os
import json
import time
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pathlib import Path

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç—ã AIMagistr 3.0
try:
    from brain.ai_client import BrainManager
    from integrations.yandex_vision import YandexVision
    from integrations.yandex_translate import YandexTranslate
    from integrations.yandex_ocr import YandexOCR
    from personal_crm import PersonalCRM
    from routine_features import RoutineFeatures
    BRAIN_AVAILABLE = True
except ImportError as e:
    print(f"Warning: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    BRAIN_AVAILABLE = False

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_file = State()
    waiting_for_translation = State()
    waiting_for_ocr = State()


class AIMagistrTelegramBot:
    """
    AIMagistr 3.0 Telegram Bot
    –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å Yandex AI
    """
    
    def __init__(self, token: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.logger = logging.getLogger("AIMagistrBot")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        if not token:
            token = os.getenv("TELEGRAM_BOT_TOKEN")
            if not token:
                raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = Bot(
            token=token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å FSM
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.brain_manager = None
        self.vision = None
        self.translate = None
        self.ocr = None
        self.crm = None
        self.routine = None
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_contexts = {}
        self.user_roles = {}  # admin/user
        self.anti_spam = {}  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_file_size = int(os.getenv('MAX_FILE_SIZE_MB', '50')) * 1024 * 1024
        self.max_context_tokens = int(os.getenv('MAX_CONTEXT_TOKENS', '4000'))
        self.enable_typing = os.getenv('ENABLE_TYPING_INDICATOR', 'true').lower() == 'true'
        
        # –§–∏—á–∏
        self.features = {
            'ocr': os.getenv('FEATURE_OCR', 'true').lower() == 'true',
            'translate': os.getenv('FEATURE_TRANSLATE', 'true').lower() == 'true',
            'rag': os.getenv('FEATURE_RAG', 'true').lower() == 'true',
            'crm': os.getenv('FEATURE_CRM', 'true').lower() == 'true',
            'rpa': os.getenv('FEATURE_RPA', 'true').lower() == 'true',
            'analytics': os.getenv('FEATURE_ANALYTICS', 'true').lower() == 'true',
            'security': os.getenv('FEATURE_SECURITY', 'true').lower() == 'true'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_components()
        self._register_handlers()
    
    def _init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            if BRAIN_AVAILABLE:
                self.brain_manager = BrainManager()
                self.vision = YandexVision()
                self.translate = YandexTranslate()
                self.ocr = YandexOCR()
                self.crm = PersonalCRM()
                self.routine = RoutineFeatures()
                
                self.logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã AIMagistr 3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                self.logger.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self._handle_start, CommandStart())
        self.dp.message.register(self._handle_help, Command("help"))
        self.dp.message.register(self._handle_features, Command("features"))
        self.dp.message.register(self._handle_reset, Command("reset"))
        self.dp.message.register(self._handle_setprompt, Command("setprompt"))
        self.dp.message.register(self._handle_lang, Command("lang"))
        self.dp.message.register(self._handle_ocr, Command("ocr"))
        self.dp.message.register(self._handle_summarize, Command("summarize"))
        self.dp.message.register(self._handle_translate, Command("translate"))
        self.dp.message.register(self._handle_metrics, Command("metrics"))
        self.dp.message.register(self._handle_admin, Command("admin"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self._handle_text_message, F.text)
        self.dp.message.register(self._handle_photo, F.photo)
        self.dp.message.register(self._handle_document, F.document)
        
        # Callback queries
        self.dp.callback_query.register(self._handle_callback)
    
    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = {
                'messages': [],
                'language': 'ru',
                'custom_prompt': None,
                'last_activity': time.time()
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
        if user_id in [int(x) for x in os.getenv('ADMIN_USER_IDS', '').split(',') if x]:
            self.user_roles[user_id] = 'admin'
        else:
            self.user_roles[user_id] = 'user'
        
        welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AIMagistr 3.0!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! –Ø –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–∞–≥–∞ - –≤–∞—à —É–º–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

<b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìÑ OCR –∏ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤  
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üíº –ü–æ–º–æ—â—å —Å –∫–∞—Ä—å–µ—Ä–æ–π –∏ CRM
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏–Ω—Å–∞–π—Ç—ã

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/help - –°–ø—Ä–∞–≤–∫–∞
/features - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
/metrics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="features")],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data="reset")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="metrics")]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard)
    
    async def _handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
<b>ü§ñ AIMagistr 3.0 - –°–ø—Ä–∞–≤–∫–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/features - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
/metrics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏:</b>
/ocr - OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/summarize - –°–∞–º–º–∞—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
/translate - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/setprompt - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
/lang - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - OCR –∏ –∞–Ω–∞–ª–∏–∑
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–∞–º–º–∞—Ä–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ –¢–µ–∫—Å—Ç (–ª—é–±–æ–π)
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF)
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, TXT)
‚Ä¢ –ê—Ä—Ö–∏–≤—ã (ZIP, RAR)
        """
        
        await message.answer(help_text)
    
    async def _handle_features(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /features"""
        features_text = """
<b>üöÄ AIMagistr 3.0 - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>

<b>üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ OCR (1-10):</b>
1. OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (RU/EN) —Å –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–æ–º
2. OCR PDF (–ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ) + —Å–∫–ª–µ–π–∫–∞ –∏ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
3. Q&A –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É (RAG + LLM)
4. –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Ç–∞–±–ª–∏—Ü (CSV/Markdown) –∏–∑ —Å–∫–∞–Ω–æ–≤
5. –†–µ—Ñ–µ—Ä–∞—Ç/—Å–∞–º–º–∞—Ä–∏ –Ω–∞ N –ø—É–Ω–∫—Ç–æ–≤
6. –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ü–µ–ª–∏–∫–æ–º (Detect ‚Üí Target)
7. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–∏–ø/—Ç–µ–º–∞/—è–∑—ã–∫)
8. –†–µ–¥–∞–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
9. –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (–∏–º–µ–Ω–∞, –¥–∞—Ç—ã, —Å—É–º–º—ã)
10. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ (–±—Ä–∏—Ñ, –æ—Ç—á–µ—Ç, –ø–∏—Å—å–º–æ)

<b>ü§ù –í—Å—Ç—Ä–µ—á–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (11-16):</b>
11. –°–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞/—Å–∫—Ä–∏–Ω—à–æ—Ç–∞
12. –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è action items –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
13. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ (iCal)
14. –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–∏—Å–µ–º –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏
15. –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å/—Ä–∏—Å–∫-–∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
16. –î–µ–π–ª–∏-—Å—Ç–µ–Ω–¥–∞–ø—ã: —Å–±–æ—Ä, —Å–≤–æ–¥–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ (17-22):</b>
17. –¢–∞—Ä–≥–µ—Ç–Ω—ã–π —Ä–µ—Å—É–º–µ-—Ç–µ–π–ª–æ—Ä –ø–æ–¥ JD
18. –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è cover letter
19. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é (–≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã)
20. LinkedIn outreach —à–∞–±–ª–æ–Ω—ã
21. –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (comp benchmark)
22. –¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤

<b>üìä CRM –∏ –ø—Ä–æ–¥–∞–∂–∏ (23-27):</b>
23. –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ø–æ—á—Ç–∞/LinkedIn)
24. –û—Ü–µ–Ω–∫–∞ –ª–∏–¥–∞ (—Å–∫–æ—Ä–∏–Ω–≥) –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
25. –ê–≤—Ç–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
26. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–ª–ª–æ—É-–∞–ø–æ–≤ –∏ next steps
27. –†–µ–∑—é–º–µ –∞–∫–∫–∞—É–Ω—Ç–∞: —Ä–∏—Å–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

<b>ü§ñ RPA –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (28-33):</b>
28. Browser RPA: –ª–æ–≥–∏–Ω/–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ/—Å–∫—Ä–∏–Ω—à–æ—Ç—ã
29. Desktop RPA: –∫–ª–∏–∫/–≤–≤–æ–¥/–≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
30. –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (—á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
31. –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º –∏–∑ —Ç–µ–∫—Å—Ç–∞/—Ñ–∞–π–ª–∞
32. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
33. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä—É—Ç–∏–Ω (cron –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞)

<b>üß† –ó–Ω–∞–Ω–∏—è –∏ RAG (34-37):</b>
34. –ò–º–ø–æ—Ä—Ç –∑–Ω–∞–Ω–∏–π (PDF/MD/URL)
35. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
36. Chat over docs: –æ—Ç–≤–µ—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
37. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º

<b>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏–Ω—Å–∞–π—Ç—ã (38-41):</b>
38. –°–≤–æ–¥–∫–∏ –ø–æ—á—Ç—ã/—á–∞—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
39. –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã (—Ä—ã–Ω–∫–∏, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã)
40. –ê–Ω–æ–º–∞–ª–∏–∏ –∏ —Ä–∏—Å–∫–∏ (—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å/—Å–ª–æ–≤–∞-—Ç—Ä–∏–≥–≥–µ—Ä—ã)
41. KPI-–¥–∞—à–±–æ—Ä–¥ –≤ Telegram

<b>üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥ (42-44):</b>
42. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤—Ö–æ–¥—è—â–∏—Ö/–∏—Å—Ö–æ–¥—è—â–∏—Ö
43. –ë–∏–ª–∏–Ω–≥–≤-–æ—Ç–≤–µ—Ç (RU+EN) –ø–æ –∑–∞–ø—Ä–æ—Å—É
44. –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (45-47):</b>
45. –°–∫–∞–Ω —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
46. –†–µ–¥–∞–∫—Ü–∏—è PII –≤ —Ç–µ–∫—Å—Ç–∞—Ö/—Å–∫—Ä–∏–Ω–∞—Ö
47. –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞—É–¥–∏—Ç–∞ –∫–æ–º–∞–Ω–¥

<b>üí¨ –£–ª—É—á—à–µ–Ω–∏—è Telegram (48-50):</b>
48. –ö–Ω–æ–ø–∫–∏/–∏–Ω–ª–∞–π–Ω-–∫–µ–π–±–æ—Ä–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
49. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏
50. –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (ZIP, –º–Ω–æ–≥–æ–¥–æ–∫–æ–≤—ã–µ —Å–∞–º–º–∞—Ä–∏)
        """
        
        await message.answer(features_text)
    
    async def _handle_reset(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
        user_id = message.from_user.id
        
        if user_id in self.user_contexts:
            self.user_contexts[user_id]['messages'] = []
            self.user_contexts[user_id]['last_activity'] = time.time()
        
        await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
    
    async def _handle_setprompt(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setprompt"""
        user_id = message.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        prompt_text = message.text.replace('/setprompt', '').strip()
        
        if not prompt_text:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setprompt")
            return
        
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = {
                'messages': [],
                'language': 'ru',
                'custom_prompt': None,
                'last_activity': time.time()
            }
        
        self.user_contexts[user_id]['custom_prompt'] = prompt_text
        
        await message.answer(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n{prompt_text}")
    
    async def _handle_lang(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /lang"""
        user_id = message.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        lang_text = message.text.replace('/lang', '').strip().lower()
        
        if lang_text not in ['ru', 'en', 'es', 'fr', 'de']:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: ru, en, es, fr, de")
            return
        
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = {
                'messages': [],
                'language': 'ru',
                'custom_prompt': None,
                'last_activity': time.time()
            }
        
        self.user_contexts[user_id]['language'] = lang_text
        
        lang_names = {
            'ru': '–†—É—Å—Å–∫–∏–π',
            'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 
            'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
            'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
            'de': '–ù–µ–º–µ—Ü–∫–∏–π'
        }
        
        await message.answer(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang_names.get(lang_text, lang_text)}")
    
    async def _handle_ocr(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ocr"""
        user_id = message.from_user.id
        
        if not self.features['ocr']:
            await message.answer("‚ùå OCR —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        
        await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        await self.dp.set_state(user_id, UserStates.waiting_for_ocr)
    
    async def _handle_summarize(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summarize"""
        user_id = message.from_user.id
        
        await message.answer("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏")
        await self.dp.set_state(user_id, UserStates.waiting_for_file)
    
    async def _handle_translate(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /translate"""
        user_id = message.from_user.id
        
        if not self.features['translate']:
            await message.answer("‚ùå –ü–µ—Ä–µ–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        
        await message.answer("üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        await self.dp.set_state(user_id, UserStates.waiting_for_translation)
    
    async def _handle_metrics(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /metrics"""
        user_id = message.from_user.id
        
        if self.user_roles.get(user_id) != 'admin':
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        if not self.brain_manager:
            await message.answer("‚ùå AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        metrics = self.brain_manager.get_metrics()
        stats = self.brain_manager.get_usage_stats()
        
        metrics_text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AIMagistr 3.0</b>

<b>–ó–∞–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {metrics['total_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_requests']}
‚Ä¢ –û—à–∏–±–æ–∫: {metrics['failed_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics['success_rate']*100:.1f}%

<b>–¢–æ–∫–µ–Ω—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {metrics['total_tokens']:,}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics['avg_response_time']:.2f}—Å

<b>–°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ AI: {'‚úÖ' if stats['authenticated'] else '‚ùå'}
‚Ä¢ Vision: {'‚úÖ' if stats['vision_enabled'] else '‚ùå'}
‚Ä¢ Translate: {'‚úÖ' if stats['translate_enabled'] else '‚ùå'}

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.user_contexts)}
‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {sum(1 for role in self.user_roles.values() if role == 'admin')}
        """
        
        await message.answer(metrics_text)
    
    async def _handle_admin(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = message.from_user.id
        
        if self.user_roles.get(user_id) != 'admin':
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        admin_text = """
<b>üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/metrics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/reset - –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
/features - –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {self.max_file_size // (1024*1024)}MB
‚Ä¢ –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.max_context_tokens}
‚Ä¢ –¢–∏–ø–∏–Ω–≥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {'‚úÖ' if self.enable_typing else '‚ùå'}

<b>–§–∏—á–∏:</b>
‚Ä¢ OCR: {'‚úÖ' if self.features['ocr'] else '‚ùå'}
‚Ä¢ Translate: {'‚úÖ' if self.features['translate'] else '‚ùå'}
‚Ä¢ RAG: {'‚úÖ' if self.features['rag'] else '‚ùå'}
‚Ä¢ CRM: {'‚úÖ' if self.features['crm'] else '‚ùå'}
‚Ä¢ RPA: {'‚úÖ' if self.features['rpa'] else '‚ùå'}
‚Ä¢ Analytics: {'‚úÖ' if self.features['analytics'] else '‚ùå'}
‚Ä¢ Security: {'‚úÖ' if self.features['security'] else '‚ùå'}
        """
        
        await message.answer(admin_text)
    
    async def _handle_text_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        if not await self._check_anti_spam(user_id):
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await state.get_state()
        
        if current_state == UserStates.waiting_for_translation:
            await self._process_translation_request(message, text)
            await state.clear()
        else:
            await self._process_ai_request(message, text)
    
    async def _handle_photo(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = message.from_user.id
        
        if not await self._check_anti_spam(user_id):
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        current_state = await state.get_state()
        
        if current_state == UserStates.waiting_for_ocr or self.features['ocr']:
            await self._process_ocr_request(message)
        else:
            await self._process_photo_analysis(message)
        
        await state.clear()
    
    async def _handle_document(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_id = message.from_user.id
        
        if not await self._check_anti_spam(user_id):
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        current_state = await state.get_state()
        
        if current_state == UserStates.waiting_for_file:
            await self._process_document_summary(message)
        elif current_state == UserStates.waiting_for_translation:
            await self._process_document_translation(message)
        else:
            await self._process_document_analysis(message)
        
        await state.clear()
    
    async def _handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback.data
        user_id = callback.from_user.id
        
        if data == "features":
            await self._handle_features(callback.message)
        elif data == "reset":
            await self._handle_reset(callback.message)
        elif data == "metrics":
            await self._handle_metrics(callback.message)
        
        await callback.answer()
    
    async def _check_anti_spam(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        now = time.time()
        
        if user_id not in self.anti_spam:
            self.anti_spam[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        self.anti_spam[user_id] = [
            timestamp for timestamp in self.anti_spam[user_id]
            if now - timestamp < 60
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É)
        if len(self.anti_spam[user_id]) >= 10:
            return False
        
        self.anti_spam[user_id].append(now)
        return True
    
    async def _process_ai_request(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞"""
        user_id = message.from_user.id
        
        if not self.brain_manager:
            await message.answer("‚ùå AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        if self.enable_typing:
            await message.bot.send_chat_action(message.chat.id, "typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self.user_contexts.get(user_id, {})
            custom_prompt = context.get('custom_prompt')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.brain_manager.generate_response(
                prompt=text,
                system_prompt=custom_prompt
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = {
                    'messages': [],
                    'language': 'ru',
                    'custom_prompt': None,
                    'last_activity': time.time()
                }
            
            self.user_contexts[user_id]['messages'].append({
                'role': 'user',
                'content': text,
                'timestamp': time.time()
            })
            
            self.user_contexts[user_id]['messages'].append({
                'role': 'assistant',
                'content': response,
                'timestamp': time.time()
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            max_messages = 20
            if len(self.user_contexts[user_id]['messages']) > max_messages:
                self.user_contexts[user_id]['messages'] = self.user_contexts[user_id]['messages'][-max_messages:]
            
            await message.answer(response)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def _process_ocr_request(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OCR –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.ocr:
            await message.answer("‚ùå OCR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
            file_info = await message.bot.get_file(photo.file_id)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
            await message.answer("üìÑ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n[–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    async def _process_photo_analysis(self, message: Message):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        if not self.vision:
            await message.answer("‚ùå Vision –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await message.answer("üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n[–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞]")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    async def _process_document_summary(self, message: Message):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        await message.answer("üìÑ –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            await message.answer("üìã –°–∞–º–º–∞—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n[–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∞–º–º–∞—Ä–∏]")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏")
    
    async def _process_document_translation(self, message: Message):
        """–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not self.translate:
            await message.answer("‚ùå Translate –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await message.answer("üåê –ü–µ—Ä–µ–≤–æ–∂—É –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            await message.answer("üìÑ –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n[–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥]")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    async def _process_document_analysis(self, message: Message):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        await message.answer("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n[–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞]")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    async def _process_translation_request(self, message: Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"""
        if not self.translate:
            await message.answer("‚ùå Translate –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await message.answer("üåê –ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            await message.answer(f"üìÑ –ü–µ—Ä–µ–≤–æ–¥:\n\n{text} ‚Üí [–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ AIMagistr 3.0 Telegram Bot...")
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = AIMagistrTelegramBot()
        await bot.run()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
